[
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "1Delta",
    "url": "https://1delta.io/",
    "tags": [
      "DeFi"
    ],
    "description": "1delta provides access to $20B+ of liquidity for spot & margin trading, and yield farming.",
    "github": "https://github.com/1delta-DAO",
    "twitter": "https://x.com/1deltaDAO",
    "discord": "",
    "image": "1delta"
  },
  {
    "isLive": false,
    "name": "Aori",
    "url": "https://www.aori.io/",
    "tags": [
      "DeFi"
    ],
    "description": "Non-custodial, high-performance order book trading infrastructure for decentralized options, spot trading, and OTC settlement.",
    "github": "https://github.com/aori-io",
    "twitter": "https://x.com/aori_io",
    "discord": "",
    "image": "aori"
  },
  {
    "isLive": false,
    "name": "ArtDAO",
    "url": "https://artdao.xyz/",
    "tags": [
      "NFT"
    ],
    "description": "Scaling the possibilities of digital art on Ethereum - artists helping artists.",
    "github": "",
    "twitter": "https://x.com/Artdao_xyz",
    "discord": "",
    "image": "artdao"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Bako ID",
    "url": "https://www.bako.id/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x3bb2e28713f05a171dbd193d3b86a358d259b5a94cda74a6ae16e4f20d32e1b8",
          "name": "Bako ID Registry",
          "description": "",
          "source": "https://raw.githubusercontent.com/infinitybase/bako-id/refs/heads/main/packages/contracts/sway/contracts/registry/src/main.sw",
          "commit": "af540e2839a6c83d98552c9062d73da81887c7dd",
          "repo": "https://github.com/infinitybase/bako-id",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum RegistryContractError",
                "concreteTypeId": "80b09233651e30b7fa04b552a421e25fc4ea6dd8c3c8051ad05c9c2b4f6a13ce",
                "metadataTypeId": 1
              },
              {
                "type": "enum lib::validations::NameValidationError",
                "concreteTypeId": "3d558a9e1ceda727203eccf236db03255f30ce308181b93340f5ffb2e19831d8",
                "metadataTypeId": 2
              },
              {
                "type": "enum standards::src5::AccessError",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
                "metadataTypeId": 3
              },
              {
                "type": "enum standards::src5::State",
                "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "metadataTypeId": 4
              },
              {
                "type": "enum standards::src7::Metadata",
                "concreteTypeId": "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d",
                "metadataTypeId": 5
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 6
              },
              {
                "type": "enum std::option::Option<u64>",
                "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "metadataTypeId": 7,
                "typeArguments": [
                  "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
                "metadataTypeId": 8
              },
              {
                "type": "enum sway_libs::pausable::errors::PauseError",
                "concreteTypeId": "8b3afcadf894415a10b09fc3717487e33802c8ffbb030edafe84ca4a71b280bc",
                "metadataTypeId": 9
              },
              {
                "type": "struct events::NewNameEvent",
                "concreteTypeId": "de123b38a3d90c3cc5a3b578a47a6105e998b48d85f6fcf34c1b4b3907806a75",
                "metadataTypeId": 12
              },
              {
                "type": "struct std::address::Address",
                "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308",
                "metadataTypeId": 13
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 14
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 17
              },
              {
                "type": "struct std::string::String",
                "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
                "metadataTypeId": 18
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
                "metadataTypeId": 19
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
                "metadataTypeId": 20
              },
              {
                "type": "u16",
                "concreteTypeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum RegistryContractError",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "IncorrectAssetId",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidAmount",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AlreadyMinted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AlreadyInitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ContractNotBeZero",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ContractNotInitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotFoundName",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum lib::validations::NameValidationError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "InvalidLenght",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidChars",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "IsEmpty",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::AccessError",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::State",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "Uninitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": 6
                  },
                  {
                    "name": "Revoked",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src7::Metadata",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "B256",
                    "typeId": 0
                  },
                  {
                    "name": "Bytes",
                    "typeId": 15
                  },
                  {
                    "name": "Int",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "String",
                    "typeId": 18
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 13
                  },
                  {
                    "name": "ContractId",
                    "typeId": 17
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 10
                  }
                ],
                "typeParameters": [
                  10
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::pausable::errors::PauseError",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "Paused",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotPaused",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 10
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 11
              },
              {
                "type": "struct events::NewNameEvent",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "name",
                    "typeId": 18
                  },
                  {
                    "name": "name_hash",
                    "typeId": 0
                  },
                  {
                    "name": "owner",
                    "typeId": 6
                  },
                  {
                    "name": "resolver",
                    "typeId": 6
                  },
                  {
                    "name": "asset_id",
                    "typeId": 14
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 16
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 11
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::string::String",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "bytes",
                    "typeId": 15
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 6
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 6
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 6
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  },
                  {
                    "name": "resolver",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "period",
                    "concreteTypeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
                  }
                ],
                "name": "register",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write",
                      "read"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  },
                  {
                    "name": "key",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  },
                  {
                    "name": "value",
                    "concreteTypeId": "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d"
                  }
                ],
                "name": "set_metadata_info",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write",
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "timestamp",
                "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "ttl",
                "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "owner",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  },
                  {
                    "name": "manager_id",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "token_id",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "constructor",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "recipien",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  }
                ],
                "name": "transfer_funds",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "is_paused",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "pause",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "unpause",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "10032608944051208538",
                "concreteTypeId": "8b3afcadf894415a10b09fc3717487e33802c8ffbb030edafe84ca4a71b280bc"
              },
              {
                "logId": "9273072382193316023",
                "concreteTypeId": "80b09233651e30b7fa04b552a421e25fc4ea6dd8c3c8051ad05c9c2b4f6a13ce"
              },
              {
                "logId": "4419591021028812583",
                "concreteTypeId": "3d558a9e1ceda727203eccf236db03255f30ce308181b93340f5ffb2e19831d8"
              },
              {
                "logId": "1515152261580153489",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              },
              {
                "logId": "16001917540453911612",
                "concreteTypeId": "de123b38a3d90c3cc5a3b578a47a6105e998b48d85f6fcf34c1b4b3907806a75"
              },
              {
                "logId": "2161305517876418151",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
              },
              {
                "logId": "16280289466020123285",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
              },
              {
                "logId": "4571204900286667806",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
              },
              {
                "logId": "12970362301975156672",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0x4a62d08448e5e91c954dee7244cf2ac09e790de039e96283b2aded0e96d23ec9",
          "name": "Bako ID Registry (Proxy)",
          "description": "",
          "source": "https://raw.githubusercontent.com/infinitybase/bako-id/refs/heads/main/packages/contracts/sway/contracts/registry/src/main.sw",
          "commit": "bcbd58aee7350e996b28e518951166a78f4893cd",
          "repo": "https://github.com/infinitybase/bako-id",
          "links": [],
          "audits": []
        },
        {
          "id": "0x6a209d27a050740dc2539dcc41914f07c35ecb21f0c02279e85777353b474801",
          "name": "Bako ID NFT",
          "description": "",
          "source": "https://raw.githubusercontent.com/infinitybase/bako-id/refs/heads/main/packages/contracts/sway/contracts/nft/src/main.sw",
          "commit": "af540e2839a6c83d98552c9062d73da81887c7dd",
          "repo": "https://github.com/infinitybase/bako-id",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "enum MintError",
                "concreteTypeId": "1e37ad54df4781a840b85f3256a49d25755de400f8edcd3110c587f14639d4a4",
                "metadataTypeId": 0
              },
              {
                "type": "enum SetError",
                "concreteTypeId": "4371c77033ce03c06fa208419e34d713a3172dd59dc2d143d40c6ff7806c1982",
                "metadataTypeId": 1
              },
              {
                "type": "enum standards::src5::AccessError",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
                "metadataTypeId": 2
              },
              {
                "type": "enum standards::src5::State",
                "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "metadataTypeId": 3
              },
              {
                "type": "enum standards::src7::Metadata",
                "concreteTypeId": "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 5
              },
              {
                "type": "enum std::option::Option<b256>",
                "concreteTypeId": "0c2beb9013490c4f753f2757dfe2d8340b22ce3827d596d81d249b7038033cb6",
                "metadataTypeId": 6,
                "typeArguments": [
                  "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                ]
              },
              {
                "type": "enum std::option::Option<enum standards::src7::Metadata>",
                "concreteTypeId": "fe93748eeb5d91a422fcea06e1b374216ad4ac0b2db01be0a6316af7f90dfa4f",
                "metadataTypeId": 6,
                "typeArguments": [
                  "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::string::String>",
                "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "metadataTypeId": 6,
                "typeArguments": [
                  "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                ]
              },
              {
                "type": "enum std::option::Option<u64>",
                "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "metadataTypeId": 6,
                "typeArguments": [
                  "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ]
              },
              {
                "type": "enum std::option::Option<u8>",
                "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
                "metadataTypeId": 6,
                "typeArguments": [
                  "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                ]
              },
              {
                "type": "enum sway_libs::admin::errors::AdminError",
                "concreteTypeId": "00b7a382efc43806d838a854db78cfb32171c259d5df893d1df8a4eba1906be4",
                "metadataTypeId": 7
              },
              {
                "type": "enum sway_libs::asset::errors::BurnError",
                "concreteTypeId": "3acdc2adac8e0589c5864525e0edc9dc61a9571a4d09c3c57b58ea76d33f4b46",
                "metadataTypeId": 8
              },
              {
                "type": "enum sway_libs::asset::errors::MintError",
                "concreteTypeId": "dff9dfec998a49b40f1c4b09567400f0e712aaf939c08f7d07bc5c63116e1084",
                "metadataTypeId": 9
              },
              {
                "type": "enum sway_libs::asset::errors::SetMetadataError",
                "concreteTypeId": "c6c09c148c1a1341c7ab81697b3545cc695fa67668a169cddc59790a9a0b6b44",
                "metadataTypeId": 10
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
                "metadataTypeId": 11
              },
              {
                "type": "str[3]",
                "concreteTypeId": "0a92c8e0f509a2d3a66f68dd50408ce45a1a2596803b0bc983a69b34bd40dad2"
              },
              {
                "type": "struct standards::src20::SetNameEvent",
                "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c",
                "metadataTypeId": 14
              },
              {
                "type": "struct standards::src20::TotalSupplyEvent",
                "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3",
                "metadataTypeId": 15
              },
              {
                "type": "struct standards::src7::SetMetadataEvent",
                "concreteTypeId": "f1b1cc90b68559aa4bb5cc58201ebb5c5402ed3aa28927140761e8ff7dcd3ab8",
                "metadataTypeId": 16
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 18
              },
              {
                "type": "struct std::string::String",
                "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
                "metadataTypeId": 22
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
                "metadataTypeId": 23
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
                "metadataTypeId": 24
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              },
              {
                "type": "u8",
                "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
              }
            ],
            "metadataTypes": [
              {
                "type": "enum MintError",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "CannotMintMoreThanOneNFTWithSubId",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "MaxNFTsMinted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NFTAlreadyMinted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum SetError",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "ValueAlreadySet",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::AccessError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::State",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Uninitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": 5
                  },
                  {
                    "name": "Revoked",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src7::Metadata",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "B256",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "Bytes",
                    "typeId": 19
                  },
                  {
                    "name": "Int",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "String",
                    "typeId": 22
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 17
                  },
                  {
                    "name": "ContractId",
                    "typeId": 21
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 12
                  }
                ],
                "typeParameters": [
                  12
                ]
              },
              {
                "type": "enum sway_libs::admin::errors::AdminError",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "NotAdmin",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::asset::errors::BurnError",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "NotEnoughCoins",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ZeroAmount",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::asset::errors::MintError",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "ZeroAmount",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::asset::errors::SetMetadataError",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "EmptyString",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "EmptyBytes",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 12
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 13
              },
              {
                "type": "struct standards::src20::SetNameEvent",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 18
                  },
                  {
                    "name": "name",
                    "typeId": 6,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 22
                      }
                    ]
                  },
                  {
                    "name": "sender",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct standards::src20::TotalSupplyEvent",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 18
                  },
                  {
                    "name": "supply",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "sender",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct standards::src7::SetMetadataEvent",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 18
                  },
                  {
                    "name": "metadata",
                    "typeId": 6,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 4
                      }
                    ]
                  },
                  {
                    "name": "key",
                    "typeId": 22
                  },
                  {
                    "name": "sender",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 20
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 13
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 21,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::string::String",
                "metadataTypeId": 22,
                "components": [
                  {
                    "name": "bytes",
                    "typeId": 19
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "metadataTypeId": 23,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "metadataTypeId": 24,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 5
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 5
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "admin",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "constructor",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "admin",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "add_admin",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "admin",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "revoke_admin",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "decimals",
                "output": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "name",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "symbol",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "total_assets",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "total_supply",
                "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "key",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "metadata",
                "output": "fe93748eeb5d91a422fcea06e1b374216ad4ac0b2db01be0a6316af7f90dfa4f",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "sub_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "burn",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "recipient",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "sub_id",
                    "concreteTypeId": "0c2beb9013490c4f753f2757dfe2d8340b22ce3827d596d81d249b7038033cb6"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "mint",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "_asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "_decimals",
                    "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  }
                ],
                "name": "set_decimals",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "set_name",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "symbol",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "set_symbol",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "key",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  },
                  {
                    "name": "metadata",
                    "concreteTypeId": "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d"
                  }
                ],
                "name": "set_metadata",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "2161305517876418151",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
              },
              {
                "logId": "16280289466020123285",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
              },
              {
                "logId": "4571204900286667806",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
              },
              {
                "logId": "12970362301975156672",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
              },
              {
                "logId": "51689703501740038",
                "concreteTypeId": "00b7a382efc43806d838a854db78cfb32171c259d5df893d1df8a4eba1906be4"
              },
              {
                "logId": "4237256875605624201",
                "concreteTypeId": "3acdc2adac8e0589c5864525e0edc9dc61a9571a4d09c3c57b58ea76d33f4b46"
              },
              {
                "logId": "17462098202904023478",
                "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3"
              },
              {
                "logId": "2177399524891787688",
                "concreteTypeId": "1e37ad54df4781a840b85f3256a49d25755de400f8edcd3110c587f14639d4a4"
              },
              {
                "logId": "16139176946940135860",
                "concreteTypeId": "dff9dfec998a49b40f1c4b09567400f0e712aaf939c08f7d07bc5c63116e1084"
              },
              {
                "logId": "4859884757628879808",
                "concreteTypeId": "4371c77033ce03c06fa208419e34d713a3172dd59dc2d143d40c6ff7806c1982"
              },
              {
                "logId": "14321618427101975361",
                "concreteTypeId": "c6c09c148c1a1341c7ab81697b3545cc695fa67668a169cddc59790a9a0b6b44"
              },
              {
                "logId": "7845998088195677205",
                "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c"
              },
              {
                "logId": "17415926155927968170",
                "concreteTypeId": "f1b1cc90b68559aa4bb5cc58201ebb5c5402ed3aa28927140761e8ff7dcd3ab8"
              }
            ],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "DECIMALS",
                "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b",
                "offset": 46216
              },
              {
                "name": "SYMBOL",
                "concreteTypeId": "0a92c8e0f509a2d3a66f68dd50408ce45a1a2596803b0bc983a69b34bd40dad2",
                "offset": 46224
              }
            ]
          }
        },
        {
          "id": "0x3ca7ac3db222a740e1c89158d9255afc2c3591ee3f34aedcaaf7cfeceebd0833",
          "name": "Bako ID Manager",
          "description": "",
          "source": "https://raw.githubusercontent.com/infinitybase/bako-id/refs/heads/main/packages/contracts/sway/contracts/manager/src/main.sw",
          "commit": "af540e2839a6c83d98552c9062d73da81887c7dd",
          "repo": "https://github.com/infinitybase/bako-id",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "enum ManagerError",
                "concreteTypeId": "00b1211efa160123969a7efe1d4597cdb9c6b6e4b311f933e55760a79e7c28fb",
                "metadataTypeId": 1
              },
              {
                "type": "enum standards::src5::AccessError",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
                "metadataTypeId": 2
              },
              {
                "type": "enum standards::src5::State",
                "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 5,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "enum std::option::Option<struct lib::abis::manager::RecordData>",
                "concreteTypeId": "f9212aadfc7e62516fa2ffae7be391807a1a2ec3dd63b662a25fd394cb0f8871",
                "metadataTypeId": 5,
                "typeArguments": [
                  "a06087fea05d71c273e06e235102af0ef06e08660df4f94ecbe49e7f96ab4635"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::string::String>",
                "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "metadataTypeId": 5,
                "typeArguments": [
                  "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
                "metadataTypeId": 6
              },
              {
                "type": "struct events::ManagerLogEvent",
                "concreteTypeId": "9aafd728aad1a0d76d5874a850f257bf49c6d7b6979517e19b53496080e902e9",
                "metadataTypeId": 9
              },
              {
                "type": "struct lib::abis::manager::RecordData",
                "concreteTypeId": "a06087fea05d71c273e06e235102af0ef06e08660df4f94ecbe49e7f96ab4635",
                "metadataTypeId": 10
              },
              {
                "type": "struct std::string::String",
                "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
                "metadataTypeId": 15
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
                "metadataTypeId": 16
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
                "metadataTypeId": 17
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum ManagerError",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "RecordNotFound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "RecordAlreadyExists",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ContractNotInitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::AccessError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::State",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Uninitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": 4
                  },
                  {
                    "name": "Revoked",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 11
                  },
                  {
                    "name": "ContractId",
                    "typeId": 14
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 7
                  }
                ],
                "typeParameters": [
                  7
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 7
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 8
              },
              {
                "type": "struct events::ManagerLogEvent",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "fnname",
                    "typeId": 15
                  },
                  {
                    "name": "name",
                    "typeId": 15
                  },
                  {
                    "name": "owner",
                    "typeId": 4
                  },
                  {
                    "name": "resolver",
                    "typeId": 4
                  },
                  {
                    "name": "name_hash",
                    "typeId": 0
                  },
                  {
                    "name": "timestamp",
                    "typeId": 19
                  },
                  {
                    "name": "period",
                    "typeId": 18
                  }
                ]
              },
              {
                "type": "struct lib::abis::manager::RecordData",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "owner",
                    "typeId": 4
                  },
                  {
                    "name": "resolver",
                    "typeId": 4
                  },
                  {
                    "name": "period",
                    "typeId": 18
                  },
                  {
                    "name": "timestamp",
                    "typeId": 19
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 13
                  },
                  {
                    "name": "len",
                    "typeId": 19
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 8
                  },
                  {
                    "name": "cap",
                    "typeId": 19
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::string::String",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "bytes",
                    "typeId": 12
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 4
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "u16",
                "metadataTypeId": 18
              },
              {
                "type": "u64",
                "metadataTypeId": 19
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  },
                  {
                    "name": "data",
                    "concreteTypeId": "a06087fea05d71c273e06e235102af0ef06e08660df4f94ecbe49e7f96ab4635"
                  }
                ],
                "name": "set_record",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  },
                  {
                    "name": "resolver",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "set_resolver",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "resolver",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_name",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "get_owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "get_record",
                "output": "f9212aadfc7e62516fa2ffae7be391807a1a2ec3dd63b662a25fd394cb0f8871",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "get_resolver",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "admin",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "constructor",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "admin",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "add_admin",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "admin",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "revoke_admin",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "49857487806267683",
                "concreteTypeId": "00b1211efa160123969a7efe1d4597cdb9c6b6e4b311f933e55760a79e7c28fb"
              },
              {
                "logId": "11146364172429795543",
                "concreteTypeId": "9aafd728aad1a0d76d5874a850f257bf49c6d7b6979517e19b53496080e902e9"
              },
              {
                "logId": "2161305517876418151",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
              },
              {
                "logId": "16280289466020123285",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
              },
              {
                "logId": "4571204900286667806",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
              },
              {
                "logId": "12970362301975156672",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0x3f12590e0fbd5fa29044b54fb3af17c1441c8eda1f1a74bdbf0f03ae489c448d",
          "name": "Bako ID Resolver",
          "description": "",
          "source": "https://raw.githubusercontent.com/infinitybase/bako-id/refs/heads/main/packages/contracts/sway/contracts/resolver/src/main.sw",
          "commit": "af540e2839a6c83d98552c9062d73da81887c7dd",
          "repo": "https://github.com/infinitybase/bako-id",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 1
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 2,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::string::String>",
                "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "metadataTypeId": 2,
                "typeArguments": [
                  "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                ]
              },
              {
                "type": "str",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 8
              },
              {
                "type": "struct std::string::String",
                "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
                "metadataTypeId": 9
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 5
                  },
                  {
                    "name": "ContractId",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 3
                  }
                ],
                "typeParameters": [
                  3
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 3
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 4
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 7
                  },
                  {
                    "name": "len",
                    "typeId": 10
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 4
                  },
                  {
                    "name": "cap",
                    "typeId": 10
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::string::String",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "bytes",
                    "typeId": 6
                  }
                ]
              },
              {
                "type": "u64",
                "metadataTypeId": 10
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "manager_id",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "constructor",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "addr",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "name",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "addr",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "name",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "10098701174489624218",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        }
      ],
      "sepolia": []
    },
    "tags": [
      "Social"
    ],
    "description": "Bako ID is a comprehensive Identity System for Rollups.",
    "github": "https://github.com/Bako-Labs",
    "twitter": "https://x.com/bakoidentity",
    "discord": "https://discord.com/invite/E5kYKSKncj",
    "image": "bakoid"
  },
  {
    "order": 1,
    "isLiveMainnet": true,
    "isLive": true,
    "isFeatured": true,
    "name": "Bako Safe",
    "url": "https://www.bako.global/",
    "predicates": {
      "mainnet": [
        {
          "blob_id": "0x7cf30ca9e83e8b7e0d1e608fb6252d53a08144a65cd73031ff2fbc52614b8a6a",
          "name": "Bako Safe",
          "description": "The Bako Safe is a multi-signature wallet that supports Fuel native wallets and passkeys.",
          "source": "https://raw.githubusercontent.com/Bako-Labs/bako-safe/refs/heads/main/packages/sway/src/predicate/src/main.sw",
          "commit": "3638b3d237891cc2a1833e6b1280320e61bd819a",
          "repo": "https://github.com/Bako-Labs/bako-safe/tree/main/packages/sway/src/predicate",
          "image": "bakosafe",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "predicate",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "[b256; 10]",
                "concreteTypeId": "048b86a7fa6d593a3b17384eeb42370b18126ce11ea29e4d60f7a6c2a507b88d",
                "metadataTypeId": 0
              },
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "[_; 10]",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "__array_element",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [],
                "name": "main",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": null
              }
            ],
            "loggedTypes": [],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "SIGNERS",
                "concreteTypeId": "048b86a7fa6d593a3b17384eeb42370b18126ce11ea29e4d60f7a6c2a507b88d",
                "offset": 10792
              },
              {
                "name": "SIGNATURES_COUNT",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "offset": 10784
              },
              {
                "name": "HASH_PREDICATE",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "offset": 10752
              }
            ]
          }
        }
      ],
      "sepolia": []
    },
    "tags": [
      "Wallet"
    ],
    "description": "Bako Safe is a Fuel native multi-signature wallet.",
    "github": "https://github.com/Bako-Labs",
    "twitter": "https://x.com/bakosafe",
    "discord": "https://discord.com/invite/E5kYKSKncj",
    "image": "bakosafe"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Banxa",
    "url": "https://banxa.com/",
    "tags": [
      "On-Ramp"
    ],
    "description": "Banxa is a fiat-to-crypto on & off ramp solutions enabling users to conveniently and securely convert traditional fiat currencies into cryptocurrencies.",
    "github": "",
    "twitter": "https://x.com/BanxaOfficial",
    "discord": "",
    "image": "banxa"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "BearBros",
    "url": "https://bearbrosnft.xyz/",
    "tags": [
      "NFT"
    ],
    "description": "A community driven unique pixelated PFP collection of 3333 NFTs 🐾 Bros are the brotherhood of Fuel⛽",
    "github": "https://github.com/BearBros-NFT",
    "twitter": "https://x.com/BearbrosNFT",
    "discord": "http://discord.gg/5PHXuD9J",
    "image": "bearbros"
  },
  {
    "isLive": false,
    "name": "Bubblemaps",
    "url": "https://bubblemaps.io/",
    "tags": [
      "Analytics"
    ],
    "description": "Bubblemaps is the first supply auditing tool for DeFi tokens and NFTs. Our unique and colorful bubbles make on-chain data easy to understand.",
    "github": "",
    "twitter": "https://x.com/bubblemaps",
    "discord": "https://discord.gg/6DexjezHzV",
    "image": "bubblemaps"
  },
  {
    "isLive": false,
    "name": "Bubbly Finance",
    "url": "https://www.bubbly.finance",
    "tags": [
      "DeFi"
    ],
    "description": "Bubbly Finance is an AMM-based DEX, aiming to become the Uniswap for pre-market assets",
    "github": "https://github.com/bubbly-finance",
    "twitter": "https://x.com/BubblyFinance",
    "discord": "",
    "image": "bubbly"
  },
  {
    "isLive": false,
    "name": "Capsule",
    "url": "https://usecapsule.com/",
    "tags": [
      "Wallet"
    ],
    "description": "Capsule is the cross-app embedded wallet infrastructure",
    "github": "https://github.com/capsule-org",
    "twitter": "https://x.com/usecapsule",
    "discord": "",
    "image": "capsule"
  },
  {
    "isLive": false,
    "name": "Catalyst",
    "url": "https://fuelcatalyst.io",
    "tags": [
      "Fuel",
      "Launchpad"
    ],
    "description": "The Launchpad for the Fuel Ecosystem",
    "github": "",
    "twitter": "https://x.com/fuel_catalyst",
    "discord": "",
    "image": "catalyst"
  },
  {
    "isLive": false,
    "name": "Chainrisk",
    "url": "https://chainrisk.xyz",
    "tags": [
      "DeFi"
    ],
    "description": "Chainrisk automates Economic risk management for DeFi Applications",
    "github": "",
    "twitter": "https://x.com/chain_risk",
    "discord": "",
    "image": "chainrisk"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Charcoal Transpiler",
    "url": "https://github.com/ourovoros-io/charcoal",
    "tags": [
      "Tooling"
    ],
    "description": "Solidity to Sway transpiler. Available on the Sway Playground.",
    "github": "https://github.com/ourovoros-io",
    "twitter": "",
    "discord": "",
    "image": "charcoal"
  },
  {
    "isLive": true,
    "name": "Common Ground",
    "url": "https://www.commonground.cg/",
    "tags": [
      "Social"
    ],
    "description": "The Web3-powered app for communities of all shapes and sizes. Chat, share, and earn with your audience and friends.",
    "github": "",
    "twitter": "https://x.com/CommonGround_cg",
    "discord": "",
    "image": "commonground"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Constellation Battle",
    "url": "https://constellation.fun/",
    "tags": [
      "Gaming"
    ],
    "description": "Summon monsters, collect constellation cards, battle for rewards, and earn dividends—keep your monster alive to win big!",
    "github": "https://github.com/constellationbattle/game",
    "twitter": "https://x.com/constellationba",
    "discord": "",
    "image": "constellationbattle"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Cookbook",
    "url": "https://www.cookbook.dev/chains/Fuel",
    "tags": [
      "Education"
    ],
    "description": "Find smart contracts, Sway libraries, and discover protocols. Available on the Fuel Documentation.",
    "github": "",
    "twitter": "https://x.com/cookbook_dev",
    "discord": "https://discord.gg/cookbookdev",
    "image": "cookbook"
  },
  {
    "isLive": false,
    "name": "CryptoSage",
    "url": "https://cryptosage.jump.trade/coming-soon",
    "tags": [
      "Prediction Market"
    ],
    "description": "An innovative crypto opinion trading platform, where users can monetize their insights and predictions on various cryptocurrencies.",
    "github": "https://github.com/GuardainDev/Cryptosage",
    "twitter": "https://x.com/cryptosageoff",
    "discord": "",
    "image": "cryptosage"
  },
  {
    "order": 1,
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Envio",
    "url": "https://docs.envio.dev/docs/HyperIndex/fuel",
    "tags": [
      "Indexer"
    ],
    "description": "Envio is a modern, multi-chain EVM blockchain indexing framework speed-optimized for querying real-time and historical data.",
    "github": "https://github.com/enviodev",
    "twitter": "https://x.com/envio_indexer",
    "discord": "https://discord.gg/amcY528zbZ",
    "image": "envio"
  },
  {
    "isLive": false,
    "name": "Everclear",
    "url": "https://www.everclear.org/",
    "tags": [
      "Bridge"
    ],
    "description": "Everclear coordinates the global settlement of liquidity between chains, solving fragmentation for modular blockchains.",
    "github": "https://github.com/everclearorg",
    "twitter": "https://x.com/everclearorg",
    "discord": "https://discord.gg/everclear",
    "image": "everclear"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Executoors",
    "url": "https://executoors.com",
    "tags": [
      "NFT"
    ],
    "description": "A series of Executoors in search of the most flawless execution environment.",
    "github": "",
    "twitter": "https://x.com/executoors",
    "discord": "",
    "image": "executoors"
  },
  {
    "isLiveMainnet": true,
    "isLive": false,
    "isFeatured": true,
    "isFuelSeason": true,
    "name": "Fluid Protocol",
    "url": "https://fluidprotocol.xyz/",
    "tags": [
      "DeFi"
    ],
    "description": "Fluid is the native decentralized stablecoin on Fuel.",
    "github": "",
    "twitter": "https://x.com/Fluid_Protocol",
    "discord": "https://discord.gg/fluidprotocol",
    "image": "fluid"
  },
  {
    "isLiveMainnet":true,
    "isLive": true,
    "name": "FuelUp Fun",
    "url": "https://fuelup.fun/",
    "tags": [
      "DeFi",
      "Launchpad"
    ],
    "description": "Launch a Meme Token on Fuel and GO UP ONLY ON FUEL UP.",
    "github": "https://github.com/LYNC-WORLD/FuelUp",
    "twitter": "https://x.com/FuelUp_Fun",
    "discord": "",
    "image": "fuelup"
  },
  {
    "isLiveMainnet":true,
    "isLive": true,
    "name": "Fuel Bomba",
    "url": "https://fuelbomba.com/",
    "tags": [
      "DeFi",
      "NFT"
    ],
    "description": "NFTs where holders short/long ETH, earn points, and get Woopa token airdrops! ⛽️",
    "github": "",
    "twitter": "https://x.com/Fuelbomba",
    "discord": "",
    "image": "fuelbomba"
  },
  {
    "isLiveMainnet":true,
    "isLive": true,
    "name": "Fuel Monkees",
    "url": "https://fuelmonkees.com",
    "tags": [
      "NFT"
    ],
    "description": "A chaotic NFT Tribe on Fuel, uniting degens with unmatched art and unstoppable energy.",
    "github": "https://github.com/fuelmonkees",
    "twitter": "https://x.com/fuelmonkees",
    "discord": "",
    "image": "fuelmonkees"
  },
  {
    "order": 3,
    "isLive": true,
    "isFeatured":true,
    "name": "Fuel Name Service",
    "url": "https://fuelname.com/",
    "tags": [
      "Social"
    ],
    "description": "Fuel Name Service (FNS) is a domain name service built on the Fuel blockchain.",
    "github": "https://github.com/fuelet",
    "twitter": "https://x.com/FuelNameService",
    "discord": "https://discord.com/invite/8RF78b5X6a",
    "image": "fuelnameservice"
  },
  {
    "isLiveMainnet":true,
    "isLive": true,
    "name": "Fuel Pengus",
    "url": "https://fuelpengus.com/",
    "tags": [
      "NFT"
    ],
    "description": "Fuel Pengus is a collection of 5555 Penguin PFPs, Aiming to build the biggest NFT community on Fuel!",
    "github": "",
    "twitter": "https://x.com/FuelPengus",
    "discord": "https://discord.gg/JMuWQ8AZZf",
    "image": "fuelpengus"
  },
  {
    "isFeatured":true,
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Fuel Bridge",
    "url": "https://app.fuel.network/bridge",
    "tags": [
      "Bridge",
      "Fuel",
      "Tooling"
    ],
    "contracts": {
      "mainnet": [
        {
          "id": "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          "name": "Fuel Token Gateway",
          "description": "",
          "source": "https://raw.githubusercontent.com/FuelLabs/fuel-bridge/refs/heads/main/packages/fungible-token/bridge-fungible-token/implementation/src/main.sw",
          "commit": "2f61bd81cee13a6346fed3053919e28c53e1754e",
          "repo": "https://github.com/FuelLabs/fuel-bridge",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "enum errors::BridgeFungibleTokenError",
                "concreteTypeId": "0b110bf0bfe47de46ec4252cf33a4c4225e4f8185d7382091b5a7cae96b05136",
                "metadataTypeId": 0
              },
              {
                "type": "enum standards::src7::Metadata",
                "concreteTypeId": "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d",
                "metadataTypeId": 1
              },
              {
                "type": "enum std::option::Option<enum standards::src7::Metadata>",
                "concreteTypeId": "fe93748eeb5d91a422fcea06e1b374216ad4ac0b2db01be0a6316af7f90dfa4f",
                "metadataTypeId": 3,
                "typeArguments": [
                  "f44b531974c6c04e17e66ab54e9868d230b9a24b3710b184399c363f0190180d"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::string::String>",
                "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "metadataTypeId": 3,
                "typeArguments": [
                  "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                ]
              },
              {
                "type": "enum std::option::Option<u64>",
                "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "metadataTypeId": 3,
                "typeArguments": [
                  "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ]
              },
              {
                "type": "enum std::option::Option<u8>",
                "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
                "metadataTypeId": 3,
                "typeArguments": [
                  "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                ]
              },
              {
                "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
                "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038",
                "metadataTypeId": 4
              },
              {
                "type": "struct events::ClaimRefundEvent",
                "concreteTypeId": "43a196568054cc5857b7b8949732aea78a79c356fbbf23605d9057655fbaabc8",
                "metadataTypeId": 7
              },
              {
                "type": "struct events::DepositEvent",
                "concreteTypeId": "aeb9b947da259c606e2c25be1150e2150f609fe5f2ec593c9a7ebb771e4e7065",
                "metadataTypeId": 8
              },
              {
                "type": "struct events::RefundRegisteredEvent",
                "concreteTypeId": "53314ca6f7d49036353511ef4d38a91d77a13dceeb09509b89c707fcbb3b4a71",
                "metadataTypeId": 9
              },
              {
                "type": "struct events::WithdrawalEvent",
                "concreteTypeId": "4b2a1039798597241d783edcc2292afb341e5f5beb9858521a9740426db8138a",
                "metadataTypeId": 10
              },
              {
                "type": "struct standards::src20::SetDecimalsEvent",
                "concreteTypeId": "fbe071a6e7ca2b2b5e503e82638f9f11c861a6fb452b65473eca8260db87392d",
                "metadataTypeId": 11
              },
              {
                "type": "struct standards::src20::SetNameEvent",
                "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c",
                "metadataTypeId": 12
              },
              {
                "type": "struct standards::src20::SetSymbolEvent",
                "concreteTypeId": "a8a4b78066c51a50da6349bd395fe1c67e774d75c1db2c5c22288a432d7a363d",
                "metadataTypeId": 13
              },
              {
                "type": "struct standards::src20::TotalSupplyEvent",
                "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3",
                "metadataTypeId": 14
              },
              {
                "type": "struct standards::src7::SetMetadataEvent",
                "concreteTypeId": "f1b1cc90b68559aa4bb5cc58201ebb5c5402ed3aa28927140761e8ff7dcd3ab8",
                "metadataTypeId": 15
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 17
              },
              {
                "type": "struct std::string::String",
                "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
                "metadataTypeId": 21
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              },
              {
                "type": "u8",
                "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
              }
            ],
            "metadataTypes": [
              {
                "type": "enum errors::BridgeFungibleTokenError",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "UnauthorizedSender",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NoCoinsSent",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NoRefundAvailable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AssetNotFound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "WithdrawalToZeroAddress",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src7::Metadata",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "B256",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "Bytes",
                    "typeId": 18
                  },
                  {
                    "name": "Int",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "String",
                    "typeId": 21
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 16
                  },
                  {
                    "name": "ContractId",
                    "typeId": 20
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 5
                  }
                ],
                "typeParameters": [
                  5
                ]
              },
              {
                "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "NonReentrant",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 5
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 6
              },
              {
                "type": "struct events::ClaimRefundEvent",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "amount",
                    "typeId": 22
                  },
                  {
                    "name": "from",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_address",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_id",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct events::DepositEvent",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "from",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "to",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct events::RefundRegisteredEvent",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "amount",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_address",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_id",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "from",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct events::WithdrawalEvent",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "from",
                    "typeId": 2
                  },
                  {
                    "name": "to",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct standards::src20::SetDecimalsEvent",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 17
                  },
                  {
                    "name": "decimals",
                    "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  },
                  {
                    "name": "sender",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct standards::src20::SetNameEvent",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 17
                  },
                  {
                    "name": "name",
                    "typeId": 3,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 21
                      }
                    ]
                  },
                  {
                    "name": "sender",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct standards::src20::SetSymbolEvent",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 17
                  },
                  {
                    "name": "symbol",
                    "typeId": 3,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 21
                      }
                    ]
                  },
                  {
                    "name": "sender",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct standards::src20::TotalSupplyEvent",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 17
                  },
                  {
                    "name": "supply",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "sender",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct standards::src7::SetMetadataEvent",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 17
                  },
                  {
                    "name": "metadata",
                    "typeId": 3,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 1
                      }
                    ]
                  },
                  {
                    "name": "key",
                    "typeId": 21
                  },
                  {
                    "name": "sender",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 19
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 6
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::string::String",
                "metadataTypeId": 21,
                "components": [
                  {
                    "name": "bytes",
                    "typeId": 18
                  }
                ]
              },
              {
                "type": "u256",
                "metadataTypeId": 22
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "msg_idx",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "process_message",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "asset_to_l1_address",
                "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "asset_to_sub_id",
                "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "bridged_token_gateway",
                "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "attributes": null
              },
              {
                "inputs": [
                  {
                    "name": "from",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_address",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "claim_refund",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "to",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "withdraw",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "decimals",
                "output": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "name",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "symbol",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "total_assets",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "total_supply",
                "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "key",
                    "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                  }
                ],
                "name": "metadata",
                "output": "fe93748eeb5d91a422fcea06e1b374216ad4ac0b2db01be0a6316af7f90dfa4f",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "5557842539076482339",
                "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038"
              },
              {
                "logId": "797431737660767716",
                "concreteTypeId": "0b110bf0bfe47de46ec4252cf33a4c4225e4f8185d7382091b5a7cae96b05136"
              },
              {
                "logId": "5994656859013025846",
                "concreteTypeId": "53314ca6f7d49036353511ef4d38a91d77a13dceeb09509b89c707fcbb3b4a71"
              },
              {
                "logId": "17415926155927968170",
                "concreteTypeId": "f1b1cc90b68559aa4bb5cc58201ebb5c5402ed3aa28927140761e8ff7dcd3ab8"
              },
              {
                "logId": "18149631459970394923",
                "concreteTypeId": "fbe071a6e7ca2b2b5e503e82638f9f11c861a6fb452b65473eca8260db87392d"
              },
              {
                "logId": "17462098202904023478",
                "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3"
              },
              {
                "logId": "12590297951544646752",
                "concreteTypeId": "aeb9b947da259c606e2c25be1150e2150f609fe5f2ec593c9a7ebb771e4e7065"
              },
              {
                "logId": "7845998088195677205",
                "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c"
              },
              {
                "logId": "12152039456660331088",
                "concreteTypeId": "a8a4b78066c51a50da6349bd395fe1c67e774d75c1db2c5c22288a432d7a363d"
              },
              {
                "logId": "4873341570055982168",
                "concreteTypeId": "43a196568054cc5857b7b8949732aea78a79c356fbbf23605d9057655fbaabc8"
              },
              {
                "logId": "5416159340904421156",
                "concreteTypeId": "4b2a1039798597241d783edcc2292afb341e5f5beb9858521a9740426db8138a"
              }
            ],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "BRIDGED_TOKEN_GATEWAY",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "offset": 66512
              }
            ]
          }
        }
      ],
      "sepolia": []
    },
    "description": "Bridge assets from Ethereum to Fuel with Fuel's native bridge.",
    "github": "https://github.com/FuelLabs/fuel-bridge",
    "twitter": "https://x.com/fuel_network",
    "discord": "https://discord.gg/fuelnetwork",
    "image": "fuelbridge"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Fuel Connectors",
    "url": "https://docs.fuel.network/guides/fuel-connectors/non-technical-guide",
    "tags": [
      "Fuel",
      "Wallet"
    ],
    "predicates": {
      "mainnet": [
        {
          "blob_id": "0xc58d08df0d31dfaaadd57de9f04d89b7abc88b28a2f45f522cc5c1fd8da67978",
          "name": "Ethereum Connector",
          "description": "This connector supports EVM compatible EOA accounts such as MetaMask and Rabby.",
          "source": "https://raw.githubusercontent.com/FuelLabs/fuel-connectors/refs/heads/main/packages/evm-predicates/predicate/src/main.sw",
          "commit": "01c65cc6d75dd677f6fbe5fdb6975af36465a967",
          "repo": "https://github.com/FuelLabs/fuel-connectors/tree/main/packages/evm-predicates/predicate",
          "image": "ethereumconnector",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "predicate",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "witness_index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "main",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": null
              }
            ],
            "loggedTypes": [],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "SIGNER",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "offset": 4624
              }
            ]
          }
        },
        {
          "blob_id": "0x3ac5c446f2f99d83d0e2dc773bb77c619783f1389c4d0198bba9b48680b80177",
          "name": "Solana Connector",
          "description": "This connector supports SVM compatible EOA accounts such as Phantom and Backpack.",
          "source": "https://raw.githubusercontent.com/FuelLabs/fuel-connectors/refs/heads/main/packages/solana-connector/predicate/src/main.sw",
          "commit": "01c65cc6d75dd677f6fbe5fdb6975af36465a967",
          "repo": "https://github.com/FuelLabs/fuel-connectors/tree/main/packages/solana-connector/predicate",
          "image": "solanaconnector",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "predicate",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "witness_index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "main",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": null
              }
            ],
            "loggedTypes": [],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "SIGNER",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                "offset": 2672
              }
            ]
          }
        }
      ],
      "sepolia": []
    },
    "description": "The Fuel Connector supports EVM (e.g. MetaMask), SVM (e.g. Phantom) and many other compatible wallet types.",
    "github": "https://github.com/FuelLabs/fuel-connectors",
    "twitter": "https://x.com/fuel_network",
    "discord": "https://discord.gg/fuelnetwork",
    "image": "fuelwallet"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Fuel Fire",
    "url": "https://www.fuelfire.org/",
    "tags": [
      "Gaming"
    ],
    "description": "Fuel Fire is an innovative FPS game for Android with a Compete-to-Earn Model.",
    "github": "https://github.com/fuelfire009/Fuel-Fire-DevMode",
    "twitter": "https://x.com/FuelFire3",
    "discord": "",
    "image": "fuelfire"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Fuel Pumps",
    "url": "https://www.fuelpump.xyz/",
    "tags": [
      "NFT"
    ],
    "description": "OG PFP collection 2019 unique fuel pumps, marking Fuel V1's launch year ✨",
    "github": "https://github.com/Fuelpumps",
    "twitter": "https://x.com/Pumps_fuel",
    "discord": "",
    "image": "fuelpumps"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Fuel Rocks",
    "url": "https://thundernft.market/collection/fuel-rocks",
    "tags": [
      "NFT"
    ],
    "description": "Fuel Rocks 🪨⛽️, inspired by EtherRock, will redefine the Fuel ecosystem with 2019 unique rocks.",
    "github": "",
    "twitter": "https://x.com/FuelRocks2019",
    "discord": "",
    "image": "fuelrocks"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Fuel Wallet",
    "url": "https://wallet.fuel.network/docs/install/",
    "tags": [
      "Fuel",
      "Wallet"
    ],
    "description": "Explore decentralized applications and manage your crypto assets, all in one place.",
    "github": "https://github.com/fuellabs/fuels-wallet",
    "twitter": "https://x.com/fuel_network",
    "discord": "https://discord.gg/fuel-network",
    "image": "fuelwallet"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "isFeatured": true,
    "name": "Fuelet Wallet",
    "url": "https://fuelet.app/",
    "tags": [
      "Wallet"
    ],
    "description": "Join 200,000+ users who count on us to explore Fuel Ecosystem with user-friendly UX and unparalleled security.",
    "github": "https://github.com/fuelet",
    "twitter": "https://x.com/FueletWallet",
    "discord": "https://discord.gg/fueletwallet",
    "image": "fuelet"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Gas.zip",
    "url": "https://www.gas.zip/",
    "tags": [
      "Bridge"
    ],
    "description": "Gas.zip is the fastest one-stop gas refuel bridge for over 250+ chains and counting.",
    "github": "https://github.com/gasdotzip",
    "twitter": "https://x.com/gasdotzip",
    "discord": "https://discord.com/invite/gasdotzip",
    "image": "gaszip"
  },
  {
    "order": 4,
    "isLiveMainnet": true,
    "isLive": true,
    "isFeatured": true,
    "isFuelSeason": true,
    "name": "Griffy",
    "url": "https://griffy.app/",
    "predicates": {
      "mainnet": [
        {
          "blob_id": "",
          "name": "Order Predicate",
          "description": "This is the order predicate for Griffy.",
          "source": "",
          "commit": "",
          "repo": "https://github.com/FuelLabs/fuel-connectors",
          "links": [],
          "audits": []
        }
      ],
      "sepolia": []
    },
    "tags": [
      "Prediction Market"
    ],
    "description": "The NASDAQ for opinions. Griffy empowers users to trade their opinions. You can select your interest from real world events like sports, politics, celebrities, fashion and a wide range of topics and trade your opinions like you trade stocks!",
    "github": "",
    "twitter": "https://x.com/GriffyCommunity",
    "discord": "",
    "image": "griffy"
  },
  {
    "isLive": true,
    "name": "Guild",
    "url": "https://guild.xyz/fuel",
    "tags": [
      "Social"
    ],
    "description": "Automated membership management for the platforms your community already uses.",
    "github": "https://github.com/agoraxyz/guild.xyz",
    "twitter": "https://x.com/guildxyz",
    "discord": "https://discord.gg/guildxyz",
    "image": "guildxyz"
  },
  {
    "isLive": false,
    "name": "Hyperlane",
    "url": "https://hyperlane.xyz/",
    "tags": [
      "Bridge"
    ],
    "description": "Hyperlane is the permissionless Interoperability layer built for the modular future.",
    "github": "https://github.com/hyperlane-xyz",
    "twitter": "https://x.com/hyperlane_xyz",
    "discord": "",
    "image": "hyperlane"
  },
  {
    "isLive": false,
    "name": "Kassiopea",
    "url": "https://www.kassiopea.xyz/",
    "tags": [
      "DeFi"
    ],
    "description": "Kassiopea is a decentralized perpetual trading platform that revolutionizes the way people trade commodities, RWA and cryptocurrencies amidst gameplay.",
    "github": "",
    "twitter": "https://x.com/Kassiopea_xyz",
    "discord": "https://discord.gg/SX8M4YYT",
    "image": "kassiopea"
  },
  {
    "isFeatured":true,
    "isLiveMainnet": true,
    "isLive": true,
    "name": "LayerSwap",
    "url": "https://layerswap.io/",
    "tags": [
      "Bridge"
    ],
    "description": "The reliable solution for transferring crypto assets across networks in a matter of minutes.",
    "github": "https://github.com/layerswap/layerswapapp",
    "twitter": "https://x.com/layerswap",
    "discord": "",
    "image": "layerswap"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "LearnWeb3",
    "url": "https://learnweb3.io/",
    "tags": [
      "Education"
    ],
    "description": "Access free, full stack, high quality education to become a Web3 expert!",
    "github": "https://github.com/LearnWeb3DAO",
    "twitter": "https://x.com/LearnWeb3DAO",
    "discord": "https://discord.gg/learnweb3",
    "image": "learnweb3"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Linkx Finance",
    "url": "https://linkx.finance/",
    "tags": [
      "Bridge"
    ],
    "description": "LinkxFinance is a decentralized cross-rollup bridge focused on Layer 2 and heterogeneous blockchains",
    "github": "https://github.com/Linkx-Finance",
    "twitter": "https://x.com/LinkxFinance",
    "discord": "https://discord.com/invite/k3kwCqwPQQ",
    "image": "linkx"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Lync",
    "url": "https://docs.lync.world/fuel/lync-unity-fuel-sdk",
    "tags": [
      "Tooling"
    ],
    "description": "A set of SDKs for Gaming and NFTs on Fuel.",
    "github": "",
    "twitter": "https://twitter.com/Lyncworld",
    "discord": "",
    "image": "lync"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Meld",
    "url": "http://www.meld.io",
    "tags": [
      "On-Ramp"
    ],
    "description": "Fintech Stack as a Service: Connect and route fintech integrations through a single API and out of the box UI flows!",
    "github": "",
    "twitter": "https://x.com/realmeld",
    "discord": "",
    "image": "meld"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "MemeBridge",
    "url": "https://memebridge.xyz",
    "tags": [
      "Bridge"
    ],
    "description": "The cheapest Layer2 bridge. Bridge through Layer2s within seconds.",
    "github": "https://github.com/MeMeBridge",
    "twitter": "https://x.com/MemebridgeB",
    "discord": "",
    "image": "memebridge"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Metaschool",
    "url": "https://metaschool.so/",
    "tags": [
      "Education"
    ],
    "description": "Metaschool is a web3 education platform with 140K+ developers that helps developers enter web3 by building and shipping DApps.",
    "github": "https://github.com/0xmetaschool",
    "twitter": "https://x.com/0xmetaschool",
    "discord": "https://discord.com/invite/vbVMUwXWgc",
    "image": "metaschool"
  },
  {
    "order": 1,
    "isLiveMainnet": true,
    "isLive": true,
    "isFeatured": true,
    "isFuelSeason": true,
    "name": "Mira Exchange",
    "url": "https://mira.ly/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x2e40f2b244b98ed6b8204b3de0156c6961f98525c8162f80162fcf53eebd90e7",
          "name": "Mira V1 Core",
          "description": "",
          "source": "https://raw.githubusercontent.com/mira-amm/mira-v1-core/0ebb28837216276ab7bdad615fa5a0545810d37c/contracts/mira_amm_contract/src/main.sw",
          "commit": "0ebb28837216276ab7bdad615fa5a0545810d37c",
          "repo": "https://github.com/mira-amm/mira-v1-core",
          "links": [
            {
              "title": "Security Audit",
              "url": "https://docs.mira.ly/developer-guides/security-audit"
            }
          ],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
                "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
                "metadataTypeId": 2
              },
              {
                "type": "(u64, u64)",
                "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
                "metadataTypeId": 0
              },
              {
                "type": "(u64, u64, u64, u64)",
                "concreteTypeId": "8e01ff69affed33f4459c1cd8303bcc6d694800f53e508dd1e088a51017b6e11",
                "metadataTypeId": 3
              },
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum interfaces::errors::AmmError",
                "concreteTypeId": "75021c092fbe6c5da8e67b3bb45d05bac56d20ca3deb794f199db139578eee3b",
                "metadataTypeId": 4
              },
              {
                "type": "enum interfaces::errors::InputError",
                "concreteTypeId": "2c16264fa4a4e0c4dceefe1b6eee32bbd8f32e19b79110d831a389a95f37c915",
                "metadataTypeId": 5
              },
              {
                "type": "enum standards::src5::AccessError",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
                "metadataTypeId": 6
              },
              {
                "type": "enum standards::src5::State",
                "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "metadataTypeId": 7
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 8
              },
              {
                "type": "enum std::option::Option<struct interfaces::data_structures::PoolMetadata>",
                "concreteTypeId": "71d71358b0c76d3c686d18d22a0ed92ab6dc7cdabc753d4c154debcae0a03dcf",
                "metadataTypeId": 9,
                "typeArguments": [
                  "44a0560c7eea4ea134ff419f7d7735d4cde25c72966cff31ad934e76a41bdfac"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::bytes::Bytes>",
                "concreteTypeId": "50b87f43f0097a720c18f3fb2100c4502484b716128f2706b3e187aa35a6dfe8",
                "metadataTypeId": 9,
                "typeArguments": [
                  "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::contract_id::ContractId>",
                "concreteTypeId": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
                "metadataTypeId": 9,
                "typeArguments": [
                  "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::string::String>",
                "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "metadataTypeId": 9,
                "typeArguments": [
                  "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
                ]
              },
              {
                "type": "enum std::option::Option<u64>",
                "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "metadataTypeId": 9,
                "typeArguments": [
                  "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ]
              },
              {
                "type": "enum std::option::Option<u8>",
                "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
                "metadataTypeId": 9,
                "typeArguments": [
                  "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
                "metadataTypeId": 10
              },
              {
                "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
                "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038",
                "metadataTypeId": 11
              },
              {
                "type": "struct interfaces::data_structures::Asset",
                "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
                "metadataTypeId": 14
              },
              {
                "type": "struct interfaces::data_structures::PoolMetadata",
                "concreteTypeId": "44a0560c7eea4ea134ff419f7d7735d4cde25c72966cff31ad934e76a41bdfac",
                "metadataTypeId": 15
              },
              {
                "type": "struct interfaces::events::BurnEvent",
                "concreteTypeId": "362a6a689aa3d6b3e2d50426f7c94ce2717b22f1df0b7ffe541cbcb25e0b9c65",
                "metadataTypeId": 16
              },
              {
                "type": "struct interfaces::events::CreatePoolEvent",
                "concreteTypeId": "a9a76f9e31034cee0ebff18e0c0dc3b3511e277ab8644fb5b42ab97d62b52037",
                "metadataTypeId": 17
              },
              {
                "type": "struct interfaces::events::MintEvent",
                "concreteTypeId": "ae2069277682335a733c89d400032730e629e08e19f5127cba9ddd54854c1ff6",
                "metadataTypeId": 18
              },
              {
                "type": "struct interfaces::events::SwapEvent",
                "concreteTypeId": "6e2b2beb181a5f3d2c643986a5df4197407de6383085035d82fe20a2d2d779bf",
                "metadataTypeId": 19
              },
              {
                "type": "struct standards::src20::SetDecimalsEvent",
                "concreteTypeId": "fbe071a6e7ca2b2b5e503e82638f9f11c861a6fb452b65473eca8260db87392d",
                "metadataTypeId": 20
              },
              {
                "type": "struct standards::src20::SetNameEvent",
                "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c",
                "metadataTypeId": 21
              },
              {
                "type": "struct standards::src20::SetSymbolEvent",
                "concreteTypeId": "a8a4b78066c51a50da6349bd395fe1c67e774d75c1db2c5c22288a432d7a363d",
                "metadataTypeId": 22
              },
              {
                "type": "struct standards::src20::TotalSupplyEvent",
                "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3",
                "metadataTypeId": 23
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 25
              },
              {
                "type": "struct std::bytes::Bytes",
                "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
                "metadataTypeId": 26
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 28
              },
              {
                "type": "struct std::string::String",
                "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
                "metadataTypeId": 29
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
                "metadataTypeId": 30
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
                "metadataTypeId": 31
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              },
              {
                "type": "u8",
                "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
              }
            ],
            "metadataTypes": [
              {
                "type": "(_, _)",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "(_, _)",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": 32
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": 32
                  }
                ]
              },
              {
                "type": "(_, _, _)",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": 25
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": 25
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  }
                ]
              },
              {
                "type": "(_, _, _, _)",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "enum interfaces::errors::AmmError",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "InsufficientLiquidity",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NoLiquidityAdded",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CannotAddLessThanMinimumLiquidity",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CurveInvariantViolation",
                    "typeId": 1
                  }
                ]
              },
              {
                "type": "enum interfaces::errors::InputError",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "PoolAlreadyExists",
                    "typeId": 2
                  },
                  {
                    "name": "PoolDoesNotExist",
                    "typeId": 2
                  },
                  {
                    "name": "InvalidAsset",
                    "typeId": 25
                  },
                  {
                    "name": "ZeroInputAmount",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ZeroOutputAmount",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "IdenticalAssets",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "UnsortedAssetPair",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "LPTokenHashCollision",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotAdmin",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ProtocolFeesAreTooHigh",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PoolInvariantViolation",
                    "typeId": 0
                  },
                  {
                    "name": "AssetSymbolNotSet",
                    "typeId": 25
                  },
                  {
                    "name": "AssetDecimalsNotSet",
                    "typeId": 25
                  }
                ]
              },
              {
                "type": "enum standards::src5::AccessError",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::State",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "Uninitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": 8
                  },
                  {
                    "name": "Revoked",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 24
                  },
                  {
                    "name": "ContractId",
                    "typeId": 28
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 12
                  }
                ],
                "typeParameters": [
                  12
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "NonReentrant",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 12
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 13
              },
              {
                "type": "struct interfaces::data_structures::Asset",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "id",
                    "typeId": 25
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct interfaces::data_structures::PoolMetadata",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "reserve_0",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "reserve_1",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "liquidity",
                    "typeId": 14
                  },
                  {
                    "name": "decimals_0",
                    "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  },
                  {
                    "name": "decimals_1",
                    "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  }
                ]
              },
              {
                "type": "struct interfaces::events::BurnEvent",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "pool_id",
                    "typeId": 2
                  },
                  {
                    "name": "recipient",
                    "typeId": 8
                  },
                  {
                    "name": "liquidity",
                    "typeId": 14
                  },
                  {
                    "name": "asset_0_out",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_out",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct interfaces::events::CreatePoolEvent",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "pool_id",
                    "typeId": 2
                  },
                  {
                    "name": "decimals_0",
                    "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  },
                  {
                    "name": "decimals_1",
                    "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  }
                ]
              },
              {
                "type": "struct interfaces::events::MintEvent",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "pool_id",
                    "typeId": 2
                  },
                  {
                    "name": "recipient",
                    "typeId": 8
                  },
                  {
                    "name": "liquidity",
                    "typeId": 14
                  },
                  {
                    "name": "asset_0_in",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_in",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct interfaces::events::SwapEvent",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "pool_id",
                    "typeId": 2
                  },
                  {
                    "name": "recipient",
                    "typeId": 8
                  },
                  {
                    "name": "asset_0_in",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_in",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_0_out",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_out",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct standards::src20::SetDecimalsEvent",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 25
                  },
                  {
                    "name": "decimals",
                    "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
                  },
                  {
                    "name": "sender",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct standards::src20::SetNameEvent",
                "metadataTypeId": 21,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 25
                  },
                  {
                    "name": "name",
                    "typeId": 9,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 29
                      }
                    ]
                  },
                  {
                    "name": "sender",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct standards::src20::SetSymbolEvent",
                "metadataTypeId": 22,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 25
                  },
                  {
                    "name": "symbol",
                    "typeId": 9,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 29
                      }
                    ]
                  },
                  {
                    "name": "sender",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct standards::src20::TotalSupplyEvent",
                "metadataTypeId": 23,
                "components": [
                  {
                    "name": "asset",
                    "typeId": 25
                  },
                  {
                    "name": "supply",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "sender",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 24,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 25,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 26,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 27
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 27,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 13
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 28,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::string::String",
                "metadataTypeId": 29,
                "components": [
                  {
                    "name": "bytes",
                    "typeId": 26
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "metadataTypeId": 30,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "metadataTypeId": 31,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 8
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "u256",
                "metadataTypeId": 32
              }
            ],
            "functions": [
              {
                "inputs": [],
                "name": "owner",
                "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "decimals",
                "output": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "name",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "symbol",
                "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "total_assets",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "total_supply",
                "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "pool_id",
                    "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
                  },
                  {
                    "name": "to",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "burn",
                "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
                "attributes": [
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "token_0_contract_id",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "token_0_sub_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "token_1_contract_id",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "token_1_sub_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "is_stable",
                    "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  }
                ],
                "name": "create_pool",
                "output": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "fees",
                "output": "8e01ff69affed33f4459c1cd8303bcc6d694800f53e508dd1e088a51017b6e11",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "hook",
                "output": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "pool_id",
                    "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
                  },
                  {
                    "name": "to",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "mint",
                "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "pool_id",
                    "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
                  }
                ],
                "name": "pool_metadata",
                "output": "71d71358b0c76d3c686d18d22a0ed92ab6dc7cdabc753d4c154debcae0a03dcf",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "contract_id",
                    "concreteTypeId": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8"
                  }
                ],
                "name": "set_hook",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "volatile_fee",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "stable_fee",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "set_protocol_fees",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "pool_id",
                    "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
                  },
                  {
                    "name": "asset_0_out",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_out",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "to",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "data",
                    "concreteTypeId": "50b87f43f0097a720c18f3fb2100c4502484b716128f2706b3e187aa35a6dfe8"
                  }
                ],
                "name": "swap",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "5557842539076482339",
                "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038"
              },
              {
                "logId": "3176768710663004356",
                "concreteTypeId": "2c16264fa4a4e0c4dceefe1b6eee32bbd8f32e19b79110d831a389a95f37c915"
              },
              {
                "logId": "8431332278172281949",
                "concreteTypeId": "75021c092fbe6c5da8e67b3bb45d05bac56d20ca3deb794f199db139578eee3b"
              },
              {
                "logId": "17462098202904023478",
                "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3"
              },
              {
                "logId": "3903049024573527731",
                "concreteTypeId": "362a6a689aa3d6b3e2d50426f7c94ce2717b22f1df0b7ffe541cbcb25e0b9c65"
              },
              {
                "logId": "7845998088195677205",
                "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c"
              },
              {
                "logId": "12152039456660331088",
                "concreteTypeId": "a8a4b78066c51a50da6349bd395fe1c67e774d75c1db2c5c22288a432d7a363d"
              },
              {
                "logId": "18149631459970394923",
                "concreteTypeId": "fbe071a6e7ca2b2b5e503e82638f9f11c861a6fb452b65473eca8260db87392d"
              },
              {
                "logId": "12224862438738316526",
                "concreteTypeId": "a9a76f9e31034cee0ebff18e0c0dc3b3511e277ab8644fb5b42ab97d62b52037"
              },
              {
                "logId": "12547144180067087194",
                "concreteTypeId": "ae2069277682335a733c89d400032730e629e08e19f5127cba9ddd54854c1ff6"
              },
              {
                "logId": "4571204900286667806",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
              },
              {
                "logId": "7938487056892321597",
                "concreteTypeId": "6e2b2beb181a5f3d2c643986a5df4197407de6383085035d82fe20a2d2d779bf"
              },
              {
                "logId": "2161305517876418151",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
              },
              {
                "logId": "16280289466020123285",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
              },
              {
                "logId": "12970362301975156672",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
              }
            ],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "LP_FEE_VOLATILE",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "offset": 76136
              },
              {
                "name": "LP_FEE_STABLE",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "offset": 76128
              }
            ]
          }
        },
        {
          "id": "0xa703db08d1dbf30a6cd2fef942d8dcf03f25d2254e2091ee1f97bf5fa615639e",
          "name": "Mira V1 Hook",
          "description": "",
          "source": "https://raw.githubusercontent.com/mira-amm/mira-v1-core/refs/heads/main/contracts/mira_validation_hook/src/main.sw",
          "commit": "794554705998b5f677e0666e9a950ce902a7201b",
          "repo": "https://github.com/mira-amm/mira-v1-core",
          "links": [
            {
              "title": "Security Audit",
              "url": "https://docs.mira.ly/developer-guides/security-audit"
            }
          ],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
                "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
                "metadataTypeId": 1
              },
              {
                "type": "enum interfaces::errors::AmmError",
                "concreteTypeId": "75021c092fbe6c5da8e67b3bb45d05bac56d20ca3deb794f199db139578eee3b",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 5
              },
              {
                "type": "str",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 8
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "(_, _)",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": 9
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": 9
                  }
                ]
              },
              {
                "type": "(_, _, _)",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": 7
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": 7
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "b256",
                "metadataTypeId": 2
              },
              {
                "type": "bool",
                "metadataTypeId": 3
              },
              {
                "type": "enum interfaces::errors::AmmError",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "InsufficientLiquidity",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NoLiquidityAdded",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CannotAddLessThanMinimumLiquidity",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CurveInvariantViolation",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 6
                  },
                  {
                    "name": "ContractId",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 2
                  }
                ]
              },
              {
                "type": "u256",
                "metadataTypeId": 9
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "pool_id",
                    "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
                  },
                  {
                    "name": "sender",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "to",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "asset_0_in",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_in",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_0_out",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "asset_1_out",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "lp_token",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "hook",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "8431332278172281949",
                "concreteTypeId": "75021c092fbe6c5da8e67b3bb45d05bac56d20ca3deb794f199db139578eee3b"
              },
              {
                "logId": "10098701174489624218",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              }
            ],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "AMM_CONTRACT_ID",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "offset": 12456
              }
            ]
          }
        }
      ],
      "sepolia": []
    },
    "tags": [
      "DeFi"
    ],
    "description": "The liquidity hub on Fuel. Trade, earn and get rewards using the most efficient AMM on Fuel.",
    "github": "https://github.com/mira-amm",
    "twitter": "https://x.com/MiraProtocol",
    "discord": "https://discord.gg/9HzukDUKSq",
    "image": "mira"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Nukedrop",
    "url": "https://nukedrop.fun/",
    "tags": [
      "DeFi",
      "Launchpad"
    ],
    "description": "Launch a coin in under 30 seconds that's instantly deployed on Fuel for 0.005 ETH. ",
    "github": "https://github.com/NukeDrop",
    "twitter": "https://x.com/nukedropdotfun",
    "discord": "",
    "image": "nukedrop"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "ORAO",
    "url": "https://orao.network/",
    "tags": [
      "Oracle"
    ],
    "description": "Oracle service for custom data feeds.",
    "github": "https://github.com/orao-network/fuel-vrf",
    "twitter": "https://x.com/OraoNetwork",
    "discord": "",
    "image": "orao"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Orbiter Finance",
    "url": "https://www.orbiter.finance/",
    "tags": [
      "Bridge"
    ],
    "description": "Decentralized cross-rollup bridge offers low cost and almost instant transfers.",
    "github": "https://github.com/Orbiter-Finance",
    "twitter": "https://x.com/Orbiter_Finance",
    "discord": "",
    "image": "orbiter"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Owlto Finance",
    "url": "https://owlto.finance",
    "tags": [
      "Bridge"
    ],
    "description": "Owlto Finance is an intent-centric interoperability protocol. Bridge the World with an AI Agent",
    "github": "https://github.com/owlto-finance/",
    "twitter": "https://x.com/Owlto_Finance",
    "discord": "https://discord.com/invite/owlto",
    "image": "owltofinance"
  },
  {
    "isLive": false,
    "name": "Pactum",
    "url": "pactum-one.vercel.app",
    "tags": [
      "Tooling"
    ],
    "description": "Build your DAO, explore communities, and find inspiration for your project all in one place.",
    "github": "",
    "twitter": "https://x.com/Pactum_io",
    "discord": "",
    "image": "pactum"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Pangea",
    "url": "https://docs.pangea.foundation/chain-data/fuel/fuel.html",
    "tags": [
      "Indexer"
    ],
    "description": "A trustless data network from which to explore and interact with blockchains, enabling the best crypto experience.",
    "github": "https://github.com/PangeaFoundation/pangea-client/blob/master/rust-examples/examples/fuel.rs",
    "twitter": "https://x.com/in_pangea",
    "discord": "",
    "image": "pangea"
  },
  {
    "isLive": false,
    "name": "Pipeline Finance",
    "url": "https://www.pipeline.finance/",
    "tags": [
      "DeFi"
    ],
    "description": "Pipeline Finance is the go-to solution for affordable and secure token streaming on the Fuel network. Experience seamless, real-time payments with ease.",
    "github": "https://github.com/wt-xyz/pipeline",
    "twitter": "https://x.com/pipeline_fi",
    "discord": "",
    "image": "pipeline"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Props Octane",
    "url": "https://fuel.props.app/",
    "tags": [
      "Launchpad",
      "NFT"
    ],
    "description": "Props Octane is an NFT launchpad on Fuel that empowers creators to mint and showcase NFTs and provides developers with an SDK for efficient dApp and smart contract development.",
    "github": "https://github.com/Props-Labs/props-fuels",
    "twitter": "https://x.com/props",
    "discord": "https://discord.gg/feyCaDbGqU",
    "image": "propsoctane"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Props SDK",
    "url": "https://props-fuels.vercel.app/",
    "tags": [
      "NFT",
      "Tooling"
    ],
    "description": "The Props NFT SDK for Fuel empowers developers to easily build and manage dApps, games, & rewards.",
    "github": "https://github.com/Props-Labs/props-fuels",
    "twitter": "https://x.com/props",
    "discord": "https://discord.gg/feyCaDbGqU",
    "image": "propssdk"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Pyth",
    "url": "https://www.pyth.network/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x103465f1c0c901471b868b4a9e4e57c381168ac38ee5b59732943e9e004c488d",
          "name": "Pyth Core",
          "description": "",
          "source": "https://raw.githubusercontent.com/pyth-network/pyth-crosschain/refs/heads/main/target_chains/fuel/contracts/pyth-contract/src/main.sw",
          "commit": "4ab64d2539a749e51e1281bdd7744781f5e9df8c",
          "repo": "https://github.com/pyth-network/pyth-crosschain",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum pyth_interface::errors::PythError",
                "concreteTypeId": "ef9531eda675e74905aeb0648d5f0289c85f8506754060ccaae49f3e657d2946",
                "metadataTypeId": 2
              },
              {
                "type": "enum pyth_interface::errors::WormholeError",
                "concreteTypeId": "549ef08391322bda7ed2fc775474af0638edb3e851370d0d7fdecf5341640a44",
                "metadataTypeId": 3
              },
              {
                "type": "enum standards::src5::AccessError",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
                "metadataTypeId": 4
              },
              {
                "type": "enum standards::src5::State",
                "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "metadataTypeId": 5
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 6
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
                "metadataTypeId": 7
              },
              {
                "type": "str",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              },
              {
                "type": "struct pyth_interface::data_structures::data_source::DataSource",
                "concreteTypeId": "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb",
                "metadataTypeId": 10
              },
              {
                "type": "struct pyth_interface::data_structures::governance_instruction::GovernanceInstruction",
                "concreteTypeId": "bfe2ceb22444f7821c75d478fb595c4642cbf8970f8ec8960637a7c9aa6690c2",
                "metadataTypeId": 11
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::AuthorizeGovernanceDataSourceTransferPayload",
                "concreteTypeId": "0fd96dec5e5828d8a3e64d70e2d2962b1b7f4d0a8f1d6c9e035ce65e7c97679b",
                "metadataTypeId": 12
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::SetDataSourcesPayload",
                "concreteTypeId": "89b51ee7c5040a64ca6af11d37b8583445937d042f24de1865407025999d41e8",
                "metadataTypeId": 13
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::SetFeePayload",
                "concreteTypeId": "b16aeeb868cef02f09f43d578ea970bd5f5b7d12692380200c8db6492d7ff3a0",
                "metadataTypeId": 14
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::SetValidPeriodPayload",
                "concreteTypeId": "553112cfecd8d38944c33cc4528f5b23e88d21148b19abca47d8e76fe7faf163",
                "metadataTypeId": 15
              },
              {
                "type": "struct pyth_interface::data_structures::price::Price",
                "concreteTypeId": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "metadataTypeId": 16
              },
              {
                "type": "struct pyth_interface::data_structures::price::PriceFeed",
                "concreteTypeId": "13eb7054501f8758f39326623a86e36908793ac7123adf2c5eddd0634d9c0809",
                "metadataTypeId": 17
              },
              {
                "type": "struct pyth_interface::data_structures::wormhole_light::GuardianSet",
                "concreteTypeId": "c574f99b562987df1da975be7ed02d4658ad16bc1699fde46946bd14fbcc51ed",
                "metadataTypeId": 18
              },
              {
                "type": "struct pyth_interface::data_structures::wormhole_light::WormholeVM",
                "concreteTypeId": "bd8b04267be788b4834b73914421df35c49678d2056e5fe667c0726515bcb28a",
                "metadataTypeId": 19
              },
              {
                "type": "struct pyth_interface::events::ConstructedEvent",
                "concreteTypeId": "d686cd9012ca81d56b62946d7a0bbec125a19237443e81495493c08426a76b1b",
                "metadataTypeId": 20
              },
              {
                "type": "struct pyth_interface::events::DataSourcesSetEvent",
                "concreteTypeId": "8d73ffeb7192d229077a509df2382f8b8979602df4e98faec0732d24f56589be",
                "metadataTypeId": 21
              },
              {
                "type": "struct pyth_interface::events::FeeSetEvent",
                "concreteTypeId": "228b1b26fb5198bd07b4ff49c1e59f5ace59a97dbf91242b955cfc91a6b88fc3",
                "metadataTypeId": 22
              },
              {
                "type": "struct pyth_interface::events::GovernanceDataSourceSetEvent",
                "concreteTypeId": "581d4b37add000314b9bfae1fcfade22b78d3a0c8daa006aabada1c49114920e",
                "metadataTypeId": 23
              },
              {
                "type": "struct pyth_interface::events::NewGuardianSetEvent",
                "concreteTypeId": "d76acd04100912f23d6d0798c810021f2332efc785fe432091a7f873140fb097",
                "metadataTypeId": 24
              },
              {
                "type": "struct pyth_interface::events::ValidPeriodSetEvent",
                "concreteTypeId": "fc60c7d3c867f2a30c3e6be2cc21efd907b913f533f0f14ee397115a476c2f79",
                "metadataTypeId": 25
              },
              {
                "type": "struct std::bytes::Bytes",
                "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
                "metadataTypeId": 27
              },
              {
                "type": "struct std::vec::Vec<b256>",
                "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198",
                "metadataTypeId": 31,
                "typeArguments": [
                  "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                ]
              },
              {
                "type": "struct std::vec::Vec<struct pyth_interface::data_structures::data_source::DataSource>",
                "concreteTypeId": "921bd92ab7bb109127518976318770057b0a4c95b21b83dbe6121d19cdf142dd",
                "metadataTypeId": 31,
                "typeArguments": [
                  "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb"
                ]
              },
              {
                "type": "struct std::vec::Vec<struct pyth_interface::data_structures::price::PriceFeed>",
                "concreteTypeId": "7445e418358e558eaf1fb04dc2ee316739df0bce65fd8359c879b0dc9ffd3487",
                "metadataTypeId": 31,
                "typeArguments": [
                  "13eb7054501f8758f39326623a86e36908793ac7123adf2c5eddd0634d9c0809"
                ]
              },
              {
                "type": "struct std::vec::Vec<struct std::bytes::Bytes>",
                "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5",
                "metadataTypeId": 31,
                "typeArguments": [
                  "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
                ]
              },
              {
                "type": "struct std::vec::Vec<u64>",
                "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
                "metadataTypeId": 31,
                "typeArguments": [
                  "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipRenounced",
                "concreteTypeId": "43c4fa7b3297401afbf300127e59ea913e5c8f0c7ae69abbec789ab0bb872bed",
                "metadataTypeId": 32
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
                "metadataTypeId": 33
              },
              {
                "type": "u16",
                "concreteTypeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
              },
              {
                "type": "u32",
                "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "enum pyth_interface::data_structures::governance_instruction::GovernanceAction",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "UpgradeContract",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AuthorizeGovernanceDataSourceTransfer",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SetDataSources",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SetFee",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SetValidPeriod",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "RequestGovernanceDataSourceTransfer",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Invalid",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum pyth_interface::data_structures::governance_instruction::GovernanceModule",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "Executor",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Target",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "EvmExecutor",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "StacksTarget",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Invalid",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum pyth_interface::errors::PythError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "FeesCanOnlyBePaidInTheBaseAsset",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GuardianSetNotFound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "IncorrectMessageType",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InsufficientFee",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidArgument",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidAttestationSize",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidDataSourcesLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidExponent",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceDataSource",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceAction",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceMessage",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceModule",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceTarget",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidHeaderSize",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidMagic",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidMajorVersion",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidMinorVersion",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidPayloadId",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidPayloadLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidPriceFeedDataLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidProof",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidUpdateData",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidUpdateDataLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidUpdateDataSource",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidUpgradeModule",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidWormholeAddressToSet",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "LengthOfPriceFeedIdsAndPublishTimesMustMatch",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NewGuardianSetIsEmpty",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NumberOfUpdatesIrretrievable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "OldGovernanceMessage",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "OutdatedPrice",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PriceFeedNotFound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PriceFeedNotFoundWithinRange",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "WormholeGovernanceActionNotFound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum pyth_interface::errors::WormholeError",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "ConsistencyLevelIrretrievable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GovernanceActionAlreadyConsumed",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GuardianIndexIrretrievable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GuardianSetHasExpired",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GuardianSetKeyIrretrievable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GuardianSetKeysLengthNotEqual",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "GuardianSetNotFound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceAction",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceChain",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGovernanceContract",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGuardianSet",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGuardianSetKeysLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGuardianSetUpgrade",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidGuardianSetUpgradeLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidModule",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidPayloadLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidSignatureLength",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidUpdateDataSource",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NewGuardianSetIsEmpty",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NewGuardianSetIndexIsInvalid",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NoQuorum",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotSignedByCurrentGuardianSet",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SignatureInvalid",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SignatureIndicesNotAscending",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SignatureVIrretrievable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SignersLengthIrretrievable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "VMSignatureInvalid",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "VMVersionIncompatible",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::AccessError",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::State",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "Uninitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": 6
                  },
                  {
                    "name": "Revoked",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 26
                  },
                  {
                    "name": "ContractId",
                    "typeId": 29
                  }
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 8
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 9
              },
              {
                "type": "struct pyth_interface::data_structures::data_source::DataSource",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "chain_id",
                    "typeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
                  },
                  {
                    "name": "emitter_address",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::governance_instruction::GovernanceInstruction",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "magic",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  },
                  {
                    "name": "module",
                    "typeId": 1
                  },
                  {
                    "name": "action",
                    "typeId": 0
                  },
                  {
                    "name": "target_chain_id",
                    "typeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
                  },
                  {
                    "name": "payload",
                    "typeId": 27
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::AuthorizeGovernanceDataSourceTransferPayload",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "claim_vaa",
                    "typeId": 27
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::SetDataSourcesPayload",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "data_sources",
                    "typeId": 31,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 10
                      }
                    ]
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::SetFeePayload",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "new_fee",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::governance_payload::SetValidPeriodPayload",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "new_valid_period",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::price::Price",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "confidence",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "exponent",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "publish_time",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::price::PriceFeed",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "ema_price",
                    "typeId": 16
                  },
                  {
                    "name": "id",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "price",
                    "typeId": 16
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::wormhole_light::GuardianSet",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "expiration_time",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "keys",
                    "typeId": 31,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::wormhole_light::WormholeVM",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "version",
                    "typeId": 34
                  },
                  {
                    "name": "guardian_set_index",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  },
                  {
                    "name": "governance_action_hash",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "timestamp",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  },
                  {
                    "name": "nonce",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  },
                  {
                    "name": "emitter_chain_id",
                    "typeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
                  },
                  {
                    "name": "emitter_address",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "sequence",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "consistency_level",
                    "typeId": 34
                  },
                  {
                    "name": "payload",
                    "typeId": 27
                  }
                ]
              },
              {
                "type": "struct pyth_interface::events::ConstructedEvent",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "guardian_set_index",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::events::DataSourcesSetEvent",
                "metadataTypeId": 21,
                "components": [
                  {
                    "name": "old_data_sources",
                    "typeId": 31,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 10
                      }
                    ]
                  },
                  {
                    "name": "new_data_sources",
                    "typeId": 31,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 10
                      }
                    ]
                  }
                ]
              },
              {
                "type": "struct pyth_interface::events::FeeSetEvent",
                "metadataTypeId": 22,
                "components": [
                  {
                    "name": "old_fee",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "new_fee",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::events::GovernanceDataSourceSetEvent",
                "metadataTypeId": 23,
                "components": [
                  {
                    "name": "old_data_source",
                    "typeId": 10
                  },
                  {
                    "name": "new_data_source",
                    "typeId": 10
                  },
                  {
                    "name": "initial_sequence",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::events::NewGuardianSetEvent",
                "metadataTypeId": 24,
                "components": [
                  {
                    "name": "governance_action_hash",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "new_guardian_set_index",
                    "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::events::ValidPeriodSetEvent",
                "metadataTypeId": 25,
                "components": [
                  {
                    "name": "old_valid_period",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "new_valid_period",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 26,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 27,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 28
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 28,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 9
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 29,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::vec::RawVec",
                "metadataTypeId": 30,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 9
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "typeParameters": [
                  8
                ]
              },
              {
                "type": "struct std::vec::Vec",
                "metadataTypeId": 31,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 30,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 8
                      }
                    ]
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "typeParameters": [
                  8
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipRenounced",
                "metadataTypeId": 32,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 6
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "metadataTypeId": 33,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 6
                  }
                ]
              },
              {
                "type": "u8",
                "metadataTypeId": 34
              }
            ],
            "functions": [
              {
                "inputs": [],
                "name": "owner",
                "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "ema_price",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "time_period",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "ema_price_no_older_than",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "ema_price_unsafe",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "max_publish_time",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "min_publish_time",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "target_price_feed_ids",
                    "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198"
                  },
                  {
                    "name": "update_data",
                    "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5"
                  }
                ],
                "name": "parse_price_feed_updates",
                "output": "7445e418358e558eaf1fb04dc2ee316739df0bce65fd8359c879b0dc9ffd3487",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "price",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "time_period",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "price_no_older_than",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "price_unsafe",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "update_data",
                    "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5"
                  }
                ],
                "name": "update_fee",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "update_data",
                    "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5"
                  }
                ],
                "name": "update_price_feeds",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_ids",
                    "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198"
                  },
                  {
                    "name": "publish_times",
                    "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
                  },
                  {
                    "name": "update_data",
                    "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5"
                  }
                ],
                "name": "update_price_feeds_if_necessary",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [],
                "name": "valid_time_period",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "data_sources",
                    "concreteTypeId": "921bd92ab7bb109127518976318770057b0a4c95b21b83dbe6121d19cdf142dd"
                  },
                  {
                    "name": "governance_data_source",
                    "concreteTypeId": "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb"
                  },
                  {
                    "name": "wormhole_governance_data_source",
                    "concreteTypeId": "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb"
                  },
                  {
                    "name": "single_update_fee",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "valid_time_period_seconds",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "wormhole_guardian_set_addresses",
                    "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198"
                  },
                  {
                    "name": "wormhole_guardian_set_index",
                    "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  },
                  {
                    "name": "chain_id",
                    "concreteTypeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
                  }
                ],
                "name": "constructor",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "chain_id",
                "output": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "data_source",
                    "concreteTypeId": "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb"
                  }
                ],
                "name": "is_valid_data_source",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "last_executed_governance_sequence",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "latest_publish_time",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "price_feed_exists",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "price_feed_unsafe",
                "output": "13eb7054501f8758f39326623a86e36908793ac7123adf2c5eddd0634d9c0809",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "single_update_fee",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "valid_data_sources",
                "output": "921bd92ab7bb109127518976318770057b0a4c95b21b83dbe6121d19cdf142dd",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "current_guardian_set_index",
                "output": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "current_wormhole_provider",
                "output": "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "governance_action_hash",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "governance_action_is_consumed",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "index",
                    "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
                  }
                ],
                "name": "guardian_set",
                "output": "c574f99b562987df1da975be7ed02d4658ad16bc1699fde46946bd14fbcc51ed",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "encoded_vm",
                    "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
                  }
                ],
                "name": "submit_new_guardian_set",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "encoded_vm",
                    "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
                  }
                ],
                "name": "execute_governance_instruction",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "governance_data_source",
                "output": "8f97b260b402ac61805cd653dbfa653d4991ae802756e74c009d8df9c6178bbb",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "17263759643364419401",
                "concreteTypeId": "ef9531eda675e74905aeb0648d5f0289c85f8506754060ccaae49f3e657d2946"
              },
              {
                "logId": "6097575393373596634",
                "concreteTypeId": "549ef08391322bda7ed2fc775474af0638edb3e851370d0d7fdecf5341640a44"
              },
              {
                "logId": "2161305517876418151",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
              },
              {
                "logId": "16280289466020123285",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
              },
              {
                "logId": "4571204900286667806",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
              },
              {
                "logId": "4883303303013154842",
                "concreteTypeId": "43c4fa7b3297401afbf300127e59ea913e5c8f0c7ae69abbec789ab0bb872bed"
              },
              {
                "logId": "15458268789670052309",
                "concreteTypeId": "d686cd9012ca81d56b62946d7a0bbec125a19237443e81495493c08426a76b1b"
              },
              {
                "logId": "15522444483018429170",
                "concreteTypeId": "d76acd04100912f23d6d0798c810021f2332efc785fe432091a7f873140fb097"
              },
              {
                "logId": "13658014858265200820",
                "concreteTypeId": "bd8b04267be788b4834b73914421df35c49678d2056e5fe667c0726515bcb28a"
              },
              {
                "logId": "13826841070488844162",
                "concreteTypeId": "bfe2ceb22444f7821c75d478fb595c4642cbf8970f8ec8960637a7c9aa6690c2"
              },
              {
                "logId": "10098701174489624218",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              },
              {
                "logId": "1142064842477676760",
                "concreteTypeId": "0fd96dec5e5828d8a3e64d70e2d2962b1b7f4d0a8f1d6c9e035ce65e7c97679b"
              },
              {
                "logId": "6349313752173641777",
                "concreteTypeId": "581d4b37add000314b9bfae1fcfade22b78d3a0c8daa006aabada1c49114920e"
              },
              {
                "logId": "9922871334772410980",
                "concreteTypeId": "89b51ee7c5040a64ca6af11d37b8583445937d042f24de1865407025999d41e8"
              },
              {
                "logId": "10192771768357409321",
                "concreteTypeId": "8d73ffeb7192d229077a509df2382f8b8979602df4e98faec0732d24f56589be"
              },
              {
                "logId": "12784292968044359727",
                "concreteTypeId": "b16aeeb868cef02f09f43d578ea970bd5f5b7d12692380200c8db6492d7ff3a0"
              },
              {
                "logId": "2489113073291466941",
                "concreteTypeId": "228b1b26fb5198bd07b4ff49c1e59f5ace59a97dbf91242b955cfc91a6b88fc3"
              },
              {
                "logId": "6138708451323859849",
                "concreteTypeId": "553112cfecd8d38944c33cc4528f5b23e88d21148b19abca47d8e76fe7faf163"
              },
              {
                "logId": "18185755007736345251",
                "concreteTypeId": "fc60c7d3c867f2a30c3e6be2cc21efd907b913f533f0f14ee397115a476c2f79"
              }
            ],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "DEPLOYER",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "offset": 151120
              }
            ]
          }
        }
      ],
      "sepolia": []
    },
    "tags": [
      "Oracle"
    ],
    "description": "Build apps with high-fidelity oracle feeds designed for mission-critical systems.",
    "github": "https://github.com/pyth-network",
    "twitter": "https://x.com/PythNetwork",
    "discord": "https://discord.gg/invite/PythNetwork",
    "image": "pyth"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "RedStone Oracle",
    "url": "https://redstone.finance/",
    "tags": [
      "Oracle"
    ],
    "description": "Modular Oracles tailored to your decentralized application.",
    "github": "https://github.com/redstone-finance",
    "twitter": "https://x.com/redstone_defi",
    "discord": "",
    "image": "redstone"
  },
  {
  "isLiveMainnet": true,
  "isLive": true,
  "name": "Retrobridge",
  "url": "https://app.retrobridge.io/",
  "tags": [
    "Bridge"
  ],
  "description": "Multichain made easy. All chains, single app.",
  "github": "https://github.com/retro-bridge",
  "twitter": "https://x.com/retro_bridge",
  "discord": "https://discord.com/invite/retrobridge",
  "image": "retrobridge"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "RetroFuel",
    "url": "https://retrofuel.xyz/",
    "tags": [
      "NFT"
    ],
    "description": "We bring retro aesthetics to life through unique digital collectibles.",
    "github": "https://github.com/koby32px",
    "twitter": "https://x.com/retro_fuel",
    "discord": "",
    "image": "retrofuel"
    },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Ruscet Exchange",
    "url": "https://ruscet.xyz/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x8002f2e86302ef9421558d0ae25a68cdfdbec5d27915cc2db49eded220799ecc",
          "name": "Ruscet Vault",
          "description": "",
          "source": "https://raw.githubusercontent.com/burralabs/ruscet-contracts/a7d1f4604c06183d81b361e5efa5472f5b58074a/contracts/core/vault/src/main.sw",
          "commit": "a7d1f4604c06183d81b361e5efa5472f5b58074a",
          "repo": "https://github.com/burralabs/ruscet-contracts",
          "links": [
            {
              "title": "Security Audit",
              "url": "https://docs.ruscet.xyz/security/audits"
            }
          ],
          "audits": []
        },
        {
          "id": "0x1d9d3b612524384c98e1cf03a1cda6a3aadb8ac794c9df87fe5ca6ac39ae3bcc",
          "name": "Ruscet RLP Contract",
          "description": "",
          "source": "https://raw.githubusercontent.com/burralabs/ruscet-contracts/a7d1f4604c06183d81b361e5efa5472f5b58074a/contracts/assets/rlp/src/main.sw",
          "commit": "a7d1f4604c06183d81b361e5efa5472f5b58074a",
          "repo": "https://github.com/burralabs/ruscet-contracts",
          "links": [
            {
              "title": "Security Audit",
              "url": "https://docs.ruscet.xyz/security/audits"
            }
          ],
          "audits": []
        }
      ],
      "sepolia": []
    },
    "tags": [
      "DeFi"
    ],
    "description": "Ruscet is a permissionless, hyper-performant perps exchange on Fuel.",
    "github": "https://github.com/burralabs/ruscet-contracts",
    "twitter": "https://x.com/ruscetfi",
    "discord": "https://discord.gg/4EejrTfbXS",
    "image": "ruscet"
  },
  {
    "isLive": false,
    "name": "Sail Exchange",
    "url": "https://www.sail.exchange/",
    "tags": [
      "DeFi"
    ],
    "description": "Sail Exchange is a central limit order book built on Fuel.",
    "github": "https://github.com/Sail-Exchange",
    "twitter": "https://x.com/_sailexchange",
    "discord": "",
    "image": "sail"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Sangoro",
    "url": "https://sangoro.xyz/",
    "tags": [
      "NFT"
    ],
    "description": "Sangoro Travel Club is the world's first Web3.0 community built by Chinese & Turks travelers.",
    "github": "",
    "twitter": "https://x.com/Sangoro_SGR",
    "discord": "",
    "image": "sangoro"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Sentio",
    "url": "https://www.sentio.xyz/",
    "tags": [
      "Indexer",
      "Analytics"
    ],
    "description": "Sentio builds data and dev tooling products with strong developer-focus. Our product covers indexer, analytics/monitoring, debugger/simulator and code search.",
    "github": "https://github.com/sentioxyz",
    "twitter": "https://x.com/sentioxyz",
    "discord": "https://discord.gg/vSdkMYqnjb",
    "image": "sentio"
  },
  {
    "order": 2,
    "isLiveMainnet":true,
    "isLive": true,
    "isFeatured": true,
    "name": "Spark",
    "url": "https://sprk.fi/",
    "tags": [
      "DeFi"
    ],
    "description": "Spark is a predicate-based central limit order book.",
    "github": "https://github.com/compolabs/spark",
    "twitter": "https://x.com/Sprkfi",
    "discord": "https://discord.gg/Nz9VZQrSNH",
    "image": "spark"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "SQD",
    "url": "https://docs.sqd.dev/fuel-indexing/",
    "tags": [
      "Indexer"
    ],
    "description": "SQD enables permissionless, cost-efficient access to petabytes of high-value Web3 data.",
    "github": "https://github.com/subsquid/squid-sdk/tree/master/fuel",
    "twitter": "https://x.com/subsquid",
    "discord": "https://discord.com/invite/subsquid",
    "image": "subsquid"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Sway Analyzer",
    "url": "https://github.com/ourovoros-io/sway-analyzer",
    "tags": [
      "Tooling"
    ],
    "description": "A security-focused static analyzer for Sway written in Rust.",
    "github": "https://github.com/ourovoros-io/sway-analyzer",
    "twitter": "",
    "discord": "",
    "image": "swayanalyzer"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Sway Farm",
    "url": "https://www.swayfarm.xyz/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x4a6914d9ee51445a57cfddf8690eb3f072933925d6cdfa6c1e5f953dd5b8e610",
          "name": "Sway Farm",
          "description": "The core Sway Farm game contract.",
          "source": "https://raw.githubusercontent.com/FuelLabs/sway-farm/refs/heads/main/contract/src/main.sw",
          "commit": "17af4d2e097abfa6e8e659387ff4b540be9b8af8",
          "repo": "https://github.com/FuelLabs/sway-farm",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum InvalidError",
                "concreteTypeId": "85a139d61290013fdfeb54e57606f4b698f12e78570c66e08fc4dd1edf1cd265",
                "metadataTypeId": 2
              },
              {
                "type": "enum abi_structs::FoodType",
                "concreteTypeId": "dd4644d33ac916b71370850ec51a826df462bfe9036feea1005aaa7b743ab891",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::option::Option<struct abi_structs::Player>",
                "concreteTypeId": "ed636438f267ef1563310b87ec731959e3bfb69ddf16987dede7498a2b9b95d4",
                "metadataTypeId": 5,
                "typeArguments": [
                  "22290d0dc88421ed8774b48996fc8ae22f444b3c263e1a5036c9ff625d3d8950"
                ]
              },
              {
                "type": "str",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              },
              {
                "type": "struct abi_structs::BuySeeds",
                "concreteTypeId": "4e346642e8c6fecd12cde09058c03a3b9e844865eb13a855552e98f746ca205d",
                "metadataTypeId": 8
              },
              {
                "type": "struct abi_structs::GardenVector",
                "concreteTypeId": "90171ca66641f2636fe239c5a45c1cf9f90cd1ac7913cf986a93efc92d5f8688",
                "metadataTypeId": 10
              },
              {
                "type": "struct abi_structs::Harvest",
                "concreteTypeId": "84d62eb49d5b4c0eab9890756db9233139d7befc1680974c7630a0388e32e369",
                "metadataTypeId": 11
              },
              {
                "type": "struct abi_structs::LevelUp",
                "concreteTypeId": "8a2c35a45657d95d2be9567638654224d0054c6214a5b410cdc8c470c133a3b3",
                "metadataTypeId": 12
              },
              {
                "type": "struct abi_structs::NewPlayer",
                "concreteTypeId": "02599dd8b27fe93ca33ffc3c3d482d044ac47bae38bca27acfcf69463711466b",
                "metadataTypeId": 13
              },
              {
                "type": "struct abi_structs::PlantSeed",
                "concreteTypeId": "367adc51ef143121cc025b27bca40f0972ae0c837affe871f78ab6fd0d46c0a4",
                "metadataTypeId": 14
              },
              {
                "type": "struct abi_structs::Player",
                "concreteTypeId": "22290d0dc88421ed8774b48996fc8ae22f444b3c263e1a5036c9ff625d3d8950",
                "metadataTypeId": 15
              },
              {
                "type": "struct abi_structs::SellItem",
                "concreteTypeId": "9b554f45f74d8490bdfc1ecc51f971eac4cf3df795b0ceeff85c5f74dc77db71",
                "metadataTypeId": 16
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 18
              },
              {
                "type": "struct std::vec::Vec<u64>",
                "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
                "metadataTypeId": 21,
                "typeArguments": [
                  "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ]
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "[_; 10]",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "__array_element",
                    "typeId": 5,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 9
                      }
                    ]
                  }
                ]
              },
              {
                "type": "b256",
                "metadataTypeId": 1
              },
              {
                "type": "enum InvalidError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "NotEnoughTokens",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "NotEnoughSeeds",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "IncorrectAssetId",
                    "typeId": 18
                  }
                ]
              },
              {
                "type": "enum abi_structs::FoodType",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Tomatoes",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 17
                  },
                  {
                    "name": "ContractId",
                    "typeId": 19
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 6
                  }
                ],
                "typeParameters": [
                  6
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 6
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 7
              },
              {
                "type": "struct abi_structs::BuySeeds",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "address",
                    "typeId": 4
                  },
                  {
                    "name": "food_type",
                    "typeId": 3
                  },
                  {
                    "name": "amount_bought",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "cost",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "total_current_amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct abi_structs::Food",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "name",
                    "typeId": 3
                  },
                  {
                    "name": "time_planted",
                    "typeId": 5,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "struct abi_structs::GardenVector",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "inner",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct abi_structs::Harvest",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "address",
                    "typeId": 4
                  },
                  {
                    "name": "food_type",
                    "typeId": 3
                  },
                  {
                    "name": "index",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "timestamp",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct abi_structs::LevelUp",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "address",
                    "typeId": 4
                  },
                  {
                    "name": "player_info",
                    "typeId": 15
                  }
                ]
              },
              {
                "type": "struct abi_structs::NewPlayer",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "address",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct abi_structs::PlantSeed",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "address",
                    "typeId": 4
                  },
                  {
                    "name": "food_type",
                    "typeId": 3
                  },
                  {
                    "name": "index",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "timestamp",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct abi_structs::Player",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "farming_skill",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "total_value_sold",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct abi_structs::SellItem",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "address",
                    "typeId": 4
                  },
                  {
                    "name": "food_type",
                    "typeId": 3
                  },
                  {
                    "name": "amount_sold",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "value_sold",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "player_info",
                    "typeId": 15
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 1
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 1
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 1
                  }
                ]
              },
              {
                "type": "struct std::vec::RawVec",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 7
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "typeParameters": [
                  6
                ]
              },
              {
                "type": "struct std::vec::Vec",
                "metadataTypeId": 21,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 20,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 6
                      }
                    ]
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "typeParameters": [
                  6
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "food_type",
                    "concreteTypeId": "dd4644d33ac916b71370850ec51a826df462bfe9036feea1005aaa7b743ab891"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "buy_seeds",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "can_harvest",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "id",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "can_level_up",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_asset_id",
                "output": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "attributes": null
              },
              {
                "inputs": [
                  {
                    "name": "id",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_garden_vec",
                "output": "90171ca66641f2636fe239c5a45c1cf9f90cd1ac7913cf986a93efc92d5f8688",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "id",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "item",
                    "concreteTypeId": "dd4644d33ac916b71370850ec51a826df462bfe9036feea1005aaa7b743ab891"
                  }
                ],
                "name": "get_item_amount",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "id",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_player",
                "output": "ed636438f267ef1563310b87ec731959e3bfb69ddf16987dede7498a2b9b95d4",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "id",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "item",
                    "concreteTypeId": "dd4644d33ac916b71370850ec51a826df462bfe9036feea1005aaa7b743ab891"
                  }
                ],
                "name": "get_seed_amount",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "indexes",
                    "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
                  }
                ],
                "name": "harvest",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "level_up",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "new_player",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "food_type",
                    "concreteTypeId": "dd4644d33ac916b71370850ec51a826df462bfe9036feea1005aaa7b743ab891"
                  },
                  {
                    "name": "index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "plant_seed_at_index",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "food_type",
                    "concreteTypeId": "dd4644d33ac916b71370850ec51a826df462bfe9036feea1005aaa7b743ab891"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "sell_item",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "9629041069892043071",
                "concreteTypeId": "85a139d61290013fdfeb54e57606f4b698f12e78570c66e08fc4dd1edf1cd265"
              },
              {
                "logId": "5635241471306563277",
                "concreteTypeId": "4e346642e8c6fecd12cde09058c03a3b9e844865eb13a855552e98f746ca205d"
              },
              {
                "logId": "10098701174489624218",
                "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
              },
              {
                "logId": "9571889411291565070",
                "concreteTypeId": "84d62eb49d5b4c0eab9890756db9233139d7befc1680974c7630a0388e32e369"
              },
              {
                "logId": "9956391856148830557",
                "concreteTypeId": "8a2c35a45657d95d2be9567638654224d0054c6214a5b410cdc8c470c133a3b3"
              },
              {
                "logId": "169340015036328252",
                "concreteTypeId": "02599dd8b27fe93ca33ffc3c3d482d044ac47bae38bca27acfcf69463711466b"
              },
              {
                "logId": "3925692269668348193",
                "concreteTypeId": "367adc51ef143121cc025b27bca40f0972ae0c837affe871f78ab6fd0d46c0a4"
              },
              {
                "logId": "11192939610819626128",
                "concreteTypeId": "9b554f45f74d8490bdfc1ecc51f971eac4cf3df795b0ceeff85c5f74dc77db71"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        }
      ],
      "sepolia": []
    },
    "tags": [
      "Fuel",
      "Gaming"
    ],
    "description": "Grow and sell tomatoes to become a Sway Farm Hero.",
    "github": "https://github.com/FuelLabs/sway-farm",
    "twitter": "https://x.com/fuel_network",
    "discord": "https://discord.gg/fuel-network",
    "image": "swayfarm"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Sway Playground",
    "url": "https://www.sway-playground.org/",
    "tags": [
      "Fuel",
      "Tooling"
    ],
    "description": "Sway Playground enables developers to build, deploy, and interact with simple sway contracts in the browser with no installation of tools.",
    "github": "https://github.com/FuelLabs/sway-playground",
    "twitter": "https://x.com/SwayLang",
    "discord": "https://discord.gg/fuel-network",
    "image": "swayplayground"
  },
  {
    "order": 2,
    "isLiveMainnet": true,
    "isLive": true,
    "isFeatured": true,
    "name": "Swaylend",
    "isFuelSeason": true,
    "url": "https://swaylend.com/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x8748488e127dccd6f2cf2a536bf248b2f807028e32e3b845d77233ead1ce242c",
          "name": "SwayLend USDC Market",
          "description": "",
          "source": "https://raw.githubusercontent.com/Swaylend/swaylend-monorepo/refs/heads/develop/contracts/market/src/main.sw",
          "commit": "0c84d3a19d777b197b03c34386031985cec71bd3",
          "repo": "https://github.com/Swaylend/swaylend-monorepo",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "(struct std::asset_id::AssetId, u64)",
                "concreteTypeId": "229de6686c9c66098e7188f64d380a851d5ebacacaf90d991adf5b5952a70f7b",
                "metadataTypeId": 0
              },
              {
                "type": "(u256, u256)",
                "concreteTypeId": "2770d9f762bf8ec295d5c253193cd2897c893401f1f438769f92d212641ec779",
                "metadataTypeId": 1
              },
              {
                "type": "b256",
                "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum market_abi::structs::Error",
                "concreteTypeId": "4e6aabd209068d31558291cfd07cff9366801b052a1767bd0a9eb34bf55e8a0e",
                "metadataTypeId": 2
              },
              {
                "type": "enum standards::src5::AccessError",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
                "metadataTypeId": 3
              },
              {
                "type": "enum standards::src5::State",
                "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 5
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
                "metadataTypeId": 6
              },
              {
                "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
                "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038",
                "metadataTypeId": 7
              },
              {
                "type": "struct events::AbsorbCollateralEvent",
                "concreteTypeId": "31d6845ccbeb9e71f30bf07140659072ce92db76041efd6861d6895dace9e658",
                "metadataTypeId": 10
              },
              {
                "type": "struct events::BuyCollateralEvent",
                "concreteTypeId": "a95331d2168897d0f550d1c4f7fc582926a79b3e825866ecf8c11ef8dfb692c6",
                "metadataTypeId": 11
              },
              {
                "type": "struct events::CollateralAssetAdded",
                "concreteTypeId": "ea2a9368cd82d633fcc3411dbff6c25a78c7ccf550034427221102b74d7926db",
                "metadataTypeId": 12
              },
              {
                "type": "struct events::CollateralAssetPaused",
                "concreteTypeId": "457cc10e18076b4e7a0ccc563fd089b256767bb56a148450f7e58f0d7cbf54ef",
                "metadataTypeId": 13
              },
              {
                "type": "struct events::CollateralAssetResumed",
                "concreteTypeId": "81fb1b4fe81422099de81384a1f433aac8964b267aac0428e6bf423e46b88df9",
                "metadataTypeId": 14
              },
              {
                "type": "struct events::CollateralAssetUpdated",
                "concreteTypeId": "6b698723a311c1005f7846d11d7ce209d68d00c120ee855364c14656ffb5b5a7",
                "metadataTypeId": 15
              },
              {
                "type": "struct events::MarketBasicEvent",
                "concreteTypeId": "6a4af7c6d1aa3fedf33604a44da789ba359bf8f662a56fbc4de9603b8e732291",
                "metadataTypeId": 16
              },
              {
                "type": "struct events::MarketConfigurationEvent",
                "concreteTypeId": "61d1473d8ec7f29c9b7f67ec6b840b973400d6af66df556a4fb5ea9884f780b7",
                "metadataTypeId": 17
              },
              {
                "type": "struct events::PauseConfigurationEvent",
                "concreteTypeId": "ecf750cd9cc44add1b8fc9f1b11bb65d0981711b42c84d20aec21ef32bab7682",
                "metadataTypeId": 18
              },
              {
                "type": "struct events::ReservesWithdrawnEvent",
                "concreteTypeId": "27b6995841bd520fff14deec990e8d66c03d8df59a510fa25e505694b0bc6ebe",
                "metadataTypeId": 19
              },
              {
                "type": "struct events::SetPythContractIdEvent",
                "concreteTypeId": "d1ce69d85e3baf58b6bc7ebe55774b2c0ff63b955321139eece739000f91b995",
                "metadataTypeId": 20
              },
              {
                "type": "struct events::UserBasicEvent",
                "concreteTypeId": "496e403bcde15a6d2d8a6ac3ae964a1db2145d27464fad7ae2b0dd4390c90c19",
                "metadataTypeId": 21
              },
              {
                "type": "struct events::UserLiquidatedEvent",
                "concreteTypeId": "92d691781932f1848ba9433a9b1c09a97f985b331d88a1a289fc54569161d639",
                "metadataTypeId": 22
              },
              {
                "type": "struct events::UserSupplyBaseEvent",
                "concreteTypeId": "1aed7a0722d2031e0bce0b49bb46e0f91a2237480a9d928eb696c7d1a6d7250c",
                "metadataTypeId": 23
              },
              {
                "type": "struct events::UserSupplyCollateralEvent",
                "concreteTypeId": "61825e22a76ff7a0ca3ce1004c7d128c7844a8dde36cf7ea9077f8a57ef1f88a",
                "metadataTypeId": 24
              },
              {
                "type": "struct events::UserWithdrawBaseEvent",
                "concreteTypeId": "3bbf66e44a782b08497502f3c67b5e181f14ef16755805fd800040f902019de1",
                "metadataTypeId": 25
              },
              {
                "type": "struct events::UserWithdrawCollateralEvent",
                "concreteTypeId": "76ac511aac239f80b30e11716c2a730f0a814ea3acc85a13abb1777519465a4a",
                "metadataTypeId": 26
              },
              {
                "type": "struct market_abi::structs::CollateralConfiguration",
                "concreteTypeId": "027212d4a883f4144f8043ef93fee6aa9d766041c7735fa37fae71d45ab6d92d",
                "metadataTypeId": 27
              },
              {
                "type": "struct market_abi::structs::MarketBasics",
                "concreteTypeId": "8f0ca9732dda82407f3d36328a5e4b89421c5f1c404a9568afa856df6efb5802",
                "metadataTypeId": 28
              },
              {
                "type": "struct market_abi::structs::MarketConfiguration",
                "concreteTypeId": "788c494dd193488709eb7174a5299c17819b0c2e68089b18e0474d616080cc9c",
                "metadataTypeId": 29
              },
              {
                "type": "struct market_abi::structs::PauseConfiguration",
                "concreteTypeId": "8ec71ec402ef77ffda0627839b31dd1444fad8b4a95507e86bfa89f0517dbc3d",
                "metadataTypeId": 30
              },
              {
                "type": "struct market_abi::structs::PriceDataUpdate",
                "concreteTypeId": "60b16a7d7d88977a17d1cbc5d1d741c4872c833abbe5cd6eaa5e2d741cd8bf19",
                "metadataTypeId": 31
              },
              {
                "type": "struct market_abi::structs::UserBasic",
                "concreteTypeId": "2878312d8fe9af45fe59b9252d6afa651128c8f755ca8f26ae4d67ede06b8ea1",
                "metadataTypeId": 32
              },
              {
                "type": "struct pyth_interface::data_structures::price::Price",
                "concreteTypeId": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "metadataTypeId": 33
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 35
              },
              {
                "type": "struct std::bytes::Bytes",
                "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
                "metadataTypeId": 36
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 38
              },
              {
                "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, u64)>",
                "concreteTypeId": "d0540b5a00688e21ad7a3f5d7db93636c18f3ef7aed40d4e48f0cffc74683bcb",
                "metadataTypeId": 40,
                "typeArguments": [
                  "229de6686c9c66098e7188f64d380a851d5ebacacaf90d991adf5b5952a70f7b"
                ]
              },
              {
                "type": "struct std::vec::Vec<enum std::identity::Identity>",
                "concreteTypeId": "2f79033d0d3729398611309f48578b56cf5162ba85e50f4d8fb79c9d9d1abc7b",
                "metadataTypeId": 40,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "struct std::vec::Vec<struct market_abi::structs::CollateralConfiguration>",
                "concreteTypeId": "135bedc713ecdc7e568f13811c40a9df6a62b44f54789c3f87066e7ccaedcc14",
                "metadataTypeId": 40,
                "typeArguments": [
                  "027212d4a883f4144f8043ef93fee6aa9d766041c7735fa37fae71d45ab6d92d"
                ]
              },
              {
                "type": "struct std::vec::Vec<struct std::bytes::Bytes>",
                "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5",
                "metadataTypeId": 40,
                "typeArguments": [
                  "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipRenounced",
                "concreteTypeId": "43c4fa7b3297401afbf300127e59ea913e5c8f0c7ae69abbec789ab0bb872bed",
                "metadataTypeId": 41
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
                "metadataTypeId": 42
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
                "metadataTypeId": 43
              },
              {
                "type": "struct sway_libs::signed_integers::i256::I256",
                "concreteTypeId": "1c791a2f63a6d482f33e38564a4c4f67f2351f36419d0c750ce825e233c86ae1",
                "metadataTypeId": 44
              },
              {
                "type": "u256",
                "concreteTypeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              },
              {
                "type": "u8",
                "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
              }
            ],
            "metadataTypes": [
              {
                "type": "(_, _)",
                "metadataTypeId": 0,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": 35
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "(_, _)",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "__tuple_element",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "__tuple_element",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "enum market_abi::structs::Error",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "AlreadyInitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Paused",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Unauthorized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InsufficientReserves",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotLiquidatable",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotForSale",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "TooMuchSlippage",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "SupplyCapExceeded",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotCollateralized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "BorrowTooSmall",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotPermitted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "InvalidPayment",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "UnknownAsset",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "DebuggingDisabled",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotYetActive",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AlreadyActive",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "OracleContractIdNotSet",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "OraclePriceValidationError",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::AccessError",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum standards::src5::State",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "Uninitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": 5
                  },
                  {
                    "name": "Revoked",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 34
                  },
                  {
                    "name": "ContractId",
                    "typeId": 38
                  }
                ]
              },
              {
                "type": "enum sway_libs::ownership::errors::InitializationError",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "NonReentrant",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 8
              },
              {
                "type": "raw untyped ptr",
                "metadataTypeId": 9
              },
              {
                "type": "struct events::AbsorbCollateralEvent",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "seize_value",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "decimals",
                    "typeId": 45
                  }
                ]
              },
              {
                "type": "struct events::BuyCollateralEvent",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "caller",
                    "typeId": 5
                  },
                  {
                    "name": "recipient",
                    "typeId": 5
                  },
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct events::CollateralAssetAdded",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "configuration",
                    "typeId": 27
                  }
                ]
              },
              {
                "type": "struct events::CollateralAssetPaused",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "asset_id",
                    "typeId": 35
                  }
                ]
              },
              {
                "type": "struct events::CollateralAssetResumed",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "asset_id",
                    "typeId": 35
                  }
                ]
              },
              {
                "type": "struct events::CollateralAssetUpdated",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "configuration",
                    "typeId": 27
                  }
                ]
              },
              {
                "type": "struct events::MarketBasicEvent",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "market_basic",
                    "typeId": 28
                  }
                ]
              },
              {
                "type": "struct events::MarketConfigurationEvent",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "market_config",
                    "typeId": 29
                  }
                ]
              },
              {
                "type": "struct events::PauseConfigurationEvent",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "pause_config",
                    "typeId": 30
                  }
                ]
              },
              {
                "type": "struct events::ReservesWithdrawnEvent",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "caller",
                    "typeId": 5
                  },
                  {
                    "name": "to",
                    "typeId": 5
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct events::SetPythContractIdEvent",
                "metadataTypeId": 20,
                "components": [
                  {
                    "name": "contract_id",
                    "typeId": 38
                  }
                ]
              },
              {
                "type": "struct events::UserBasicEvent",
                "metadataTypeId": 21,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "user_basic",
                    "typeId": 32
                  }
                ]
              },
              {
                "type": "struct events::UserLiquidatedEvent",
                "metadataTypeId": 22,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "liquidator",
                    "typeId": 5
                  },
                  {
                    "name": "base_paid_out",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_paid_out_value",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "total_base",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "total_base_value",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "decimals",
                    "typeId": 45
                  }
                ]
              },
              {
                "type": "struct events::UserSupplyBaseEvent",
                "metadataTypeId": 23,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "supply_amount",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "repay_amount",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "struct events::UserSupplyCollateralEvent",
                "metadataTypeId": 24,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct events::UserWithdrawBaseEvent",
                "metadataTypeId": 25,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "withdraw_amount",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "borrow_amount",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "struct events::UserWithdrawCollateralEvent",
                "metadataTypeId": 26,
                "components": [
                  {
                    "name": "account",
                    "typeId": 5
                  },
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct market_abi::structs::CollateralConfiguration",
                "metadataTypeId": 27,
                "components": [
                  {
                    "name": "asset_id",
                    "typeId": 35
                  },
                  {
                    "name": "price_feed_id",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "decimals",
                    "typeId": 45
                  },
                  {
                    "name": "borrow_collateral_factor",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "liquidate_collateral_factor",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "liquidation_penalty",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "supply_cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "paused",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  }
                ]
              },
              {
                "type": "struct market_abi::structs::MarketBasics",
                "metadataTypeId": 28,
                "components": [
                  {
                    "name": "base_supply_index",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_borrow_index",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "tracking_supply_index",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "tracking_borrow_index",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "total_supply_base",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "total_borrow_base",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "last_accrual_time",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "struct market_abi::structs::MarketConfiguration",
                "metadataTypeId": 29,
                "components": [
                  {
                    "name": "base_token",
                    "typeId": 35
                  },
                  {
                    "name": "base_token_decimals",
                    "typeId": 45
                  },
                  {
                    "name": "base_token_price_feed_id",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  },
                  {
                    "name": "supply_kink",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "borrow_kink",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "supply_per_second_interest_rate_slope_low",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "supply_per_second_interest_rate_slope_high",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "supply_per_second_interest_rate_base",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "borrow_per_second_interest_rate_slope_low",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "borrow_per_second_interest_rate_slope_high",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "borrow_per_second_interest_rate_base",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "store_front_price_factor",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_tracking_index_scale",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_tracking_supply_speed",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_tracking_borrow_speed",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_min_for_rewards",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_borrow_min",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "target_reserves",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "struct market_abi::structs::PauseConfiguration",
                "metadataTypeId": 30,
                "components": [
                  {
                    "name": "supply_paused",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  },
                  {
                    "name": "withdraw_paused",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  },
                  {
                    "name": "absorb_paused",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  },
                  {
                    "name": "buy_paused",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  }
                ]
              },
              {
                "type": "struct market_abi::structs::PriceDataUpdate",
                "metadataTypeId": 31,
                "components": [
                  {
                    "name": "update_fee",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "publish_times",
                    "typeId": 40,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                      }
                    ]
                  },
                  {
                    "name": "price_feed_ids",
                    "typeId": 40,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                      }
                    ]
                  },
                  {
                    "name": "update_data",
                    "typeId": 40,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 36
                      }
                    ]
                  }
                ]
              },
              {
                "type": "struct market_abi::structs::UserBasic",
                "metadataTypeId": 32,
                "components": [
                  {
                    "name": "principal",
                    "typeId": 44
                  },
                  {
                    "name": "base_tracking_index",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  },
                  {
                    "name": "base_tracking_accrued",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "struct pyth_interface::data_structures::price::Price",
                "metadataTypeId": 33,
                "components": [
                  {
                    "name": "confidence",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "exponent",
                    "typeId": 45
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "publish_time",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 34,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 35,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::bytes::Bytes",
                "metadataTypeId": 36,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 37
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::bytes::RawBytes",
                "metadataTypeId": 37,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 9
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 38,
                "components": [
                  {
                    "name": "bits",
                    "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ]
              },
              {
                "type": "struct std::vec::RawVec",
                "metadataTypeId": 39,
                "components": [
                  {
                    "name": "ptr",
                    "typeId": 9
                  },
                  {
                    "name": "cap",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "typeParameters": [
                  8
                ]
              },
              {
                "type": "struct std::vec::Vec",
                "metadataTypeId": 40,
                "components": [
                  {
                    "name": "buf",
                    "typeId": 39,
                    "typeArguments": [
                      {
                        "name": "",
                        "typeId": 8
                      }
                    ]
                  },
                  {
                    "name": "len",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "typeParameters": [
                  8
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipRenounced",
                "metadataTypeId": 41,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipSet",
                "metadataTypeId": 42,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct sway_libs::ownership::events::OwnershipTransferred",
                "metadataTypeId": 43,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 5
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 5
                  }
                ]
              },
              {
                "type": "struct sway_libs::signed_integers::i256::I256",
                "metadataTypeId": 44,
                "components": [
                  {
                    "name": "underlying",
                    "typeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ]
              },
              {
                "type": "u32",
                "metadataTypeId": 45
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "accounts",
                    "concreteTypeId": "2f79033d0d3729398611309f48578b56cf5162ba85e50f4d8fb79c9d9d1abc7b"
                  },
                  {
                    "name": "price_data_update",
                    "concreteTypeId": "60b16a7d7d88977a17d1cbc5d1d741c4872c833abbe5cd6eaa5e2d741cd8bf19"
                  }
                ],
                "name": "absorb",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function absorbs a list of underwater accounts onto the protocol balance sheet."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `accounts`: [Vec<Identity>] - The list of underwater accounts to be absorbed."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `price_data_update`: [PriceDataUpdate] - The price data update struct to be used for updating the price feeds."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `2 + accounts.len() * 4`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `5 + accounts.len() * 5`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "market_configuration",
                    "concreteTypeId": "788c494dd193488709eb7174a5299c17819b0c2e68089b18e0474d616080cc9c"
                  },
                  {
                    "name": "owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "activate_contract",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `market_configuration`: [MarketConfiguration] - The configuration settings for the market."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `owner`: [Identity] - The identity of the owner of the contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the contract is already active, indicated by a non-zero last accrual time."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `4`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `2`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "configuration",
                    "concreteTypeId": "027212d4a883f4144f8043ef93fee6aa9d766041c7735fa37fae71d45ab6d92d"
                  }
                ],
                "name": "add_collateral_asset",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `configuration`: [CollateralConfiguration] - The collateral configuration to be added."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the asset already exists, indicated by a non-`None` value in the storage."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `2`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "available_to_borrow",
                "output": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates the amount of base asset a user can borrow based on their collateral and current borrow position."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `account`: [Identity] - The account of the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u256] - The amount of base asset the user can borrow."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `4 + storage.collateral_configurations_keys.len() * 5`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "balance_of",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the balance of a specified asset for the contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the asset whose balance is to be retrieved."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u64] - The balance of the specified asset."
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "min_amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "recipient",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "buy_collateral",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function allows buying collateral from the protocol. Prices are not updated here as the caller is expected to update them in the same transaction using a multicall handler."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset to be bought."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `min_amount`: [u64] - The minimum amount of collateral to be bought."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `recipient`: [Identity] - The account of the recipient of the collateral."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the buy operation is paused."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When payment is not in the base token or the amount is zero."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When reserves are sufficient or not less than target reserves."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the quoted collateral amount is less than the minimum requested."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When collateral reserves are insufficient."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `8`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "collateral_amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "collateral_value_to_sell",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates the base asset value for selling a collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `collateral_amount`: [u64] - The amount of the collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u64] - The value of the collateral asset in base asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `5`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "debug_increment_timestamp",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function is useful for testing purposes, allowing developers to simulate time progression during debugging."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When `DEBUG_STEP` is not greater than zero, indicating that debugging is disabled."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_all_totals_collateral",
                "output": "d0540b5a00688e21ad7a3f5d7db93636c18f3ef7aed40d4e48f0cffc74683bcb",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the total collateral amount for all collateral assets in the market."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [`Vec<(AssetId, u64)>`]: A list of tuples containing the asset ID and total collateral for each collateral asset"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1 + storage.collateral_configurations_keys.len() * 2`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_all_user_collateral",
                "output": "d0540b5a00688e21ad7a3f5d7db93636c18f3ef7aed40d4e48f0cffc74683bcb",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves all collateral assets that a user has supplied, along with their respective amounts."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `account`: [Identity] - The account of the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [Vec<(AssetId, u64)>] - A list of tuples containing the asset ID and total collateral for each collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `storage.collateral_configurations_keys.len()`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1 + storage.collateral_configurations_keys.len() * 3`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "utilization",
                    "concreteTypeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ],
                "name": "get_borrow_rate",
                "output": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates the borrow rate based on the market's utilization. "
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " It uses different rates depending on whether the utilization is below or above the kink point."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `utilization`: [u256] - The utilization of the market."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u256] - The borrow rate (decimals 18)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `3 or 6`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_collateral_configurations",
                "output": "135bedc713ecdc7e568f13811c40a9df6a62b44f54789c3f87066e7ccaedcc14",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves all collateral asset configurations in the market."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [Vec<CollateralConfiguration>]: A list of collateral configurations"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1 + storage.collateral_configurations_keys.len()`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "get_collateral_reserves",
                "output": "1c791a2f63a6d482f33e38564a4c4f67f2351f36419d0c750ce825e233c86ae1",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the reserves of a specified collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [I256] - The reserves (in asset decimals)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_market_basics",
                "output": "8f0ca9732dda82407f3d36328a5e4b89421c5f1c404a9568afa856df6efb5802",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the current market basic information."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [MarketBasics] - The market basic information."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_market_basics_with_interest",
                "output": "8f0ca9732dda82407f3d36328a5e4b89421c5f1c404a9568afa856df6efb5802",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the current market basic information, including accrued interest."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [MarketBasics] - The market basic information (with included interest)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_market_configuration",
                "output": "788c494dd193488709eb7174a5299c17819b0c2e68089b18e0474d616080cc9c",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the current market configuration."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [MarketConfiguration] - The market configuration."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_pause_configuration",
                "output": "8ec71ec402ef77ffda0627839b31dd1444fad8b4a95507e86bfa89f0517dbc3d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the current pause configuration."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [PauseConfiguration] - The current pause configuration settings."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_feed_id",
                    "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
                  }
                ],
                "name": "get_price",
                "output": "8aba92fff7345309d4313706ed7db3a811609f62da8f0d2859819db43d461ff8",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function ensures that the price data is fresh and meets the required validation criteria."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `price_feed_id`: [PriceFeedId] - The ID of the price feed for which the price is being retrieved."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [Price] - The price data retrieved from the oracle."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the `contract_id` is zero, indicating the oracle contract ID is not set."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the price is stale or ahead of the current timestamp."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the price is less than or equal to zero."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the confidence value exceeds the allowed width."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_pyth_contract_id",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the contract ID of the Pyth contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [ContractId] - The contract ID of the Pyth contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_reserves",
                "output": "1c791a2f63a6d482f33e38564a4c4f67f2351f36419d0c750ce825e233c86ae1",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates and returns the total amount of protocol reserves of the base asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [I256] - The reserves of the base asset, expressed in base token decimals."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `3` (Reads market basic, market configuration, and current balance of the base token.)"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "utilization",
                    "concreteTypeId": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e"
                  }
                ],
                "name": "get_supply_rate",
                "output": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates the supply rate based on the market's utilization."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " It applies different rates depending on whether the utilization is below or above the kink point."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `utilization`: [u256] - The utilization of the market."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u256] - The supply rate (decimals 18)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `3 or 6`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_user_balance_with_interest",
                "output": "1c791a2f63a6d482f33e38564a4c4f67f2351f36419d0c750ce825e233c86ae1",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the user's balance, including accrued interest."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `account`: [Identity] - The account of the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [I256] - The user balance (with included interest)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_user_basic",
                "output": "2878312d8fe9af45fe59b9252d6afa651128c8f755ca8f26ae4d67ede06b8ea1",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the basic information of a specified user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `account`: [Identity] - The account of the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [UserBasic] - The user basic information."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "get_user_collateral",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the amount of collateral a user has supplied for a specific asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `account`: [Identity] - The account of the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u64] - The amount of collateral the user has supplied for the specified asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "get_user_supply_borrow",
                "output": "2770d9f762bf8ec295d5c253193cd2897c893401f1f438769f92d212641ec779",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the amount of base asset supplied and borrowed by a specific user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `account`: [Identity] - The account of the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u256] - The amount of base asset supplied by the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u256] - The amount of base asset borrowed by the user."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " "
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `3`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_utilization",
                "output": "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates the utilization of the market, defined as the ratio of total borrowed"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " amount to total supplied amount."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u256] - The utilization of the market (decimals 18)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: 1 (Reads market basic information)."
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_version",
                "output": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Get version of the smart contract"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u8] - The version number of the smart contract."
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "is_liquidatable",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function checks if an account is liquidatable."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * account: [Identity] - The account to be checked."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [bool] - True if the account is liquidatable, False otherwise."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: 1"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "pause_config",
                    "concreteTypeId": "8ec71ec402ef77ffda0627839b31dd1444fad8b4a95507e86bfa89f0517dbc3d"
                  }
                ],
                "name": "pause",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function updates the pause configuration of the contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `pause_config`: [PauseConfiguration] - The pause configuration to be set."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "pause_collateral_asset",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset to be paused."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`   "
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "base_amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "quote_collateral",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function calculates the quote for collateral by considering the asset price, base price, and discount factors based on the collateral configuration."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `base_amount`: [u64] - The amount of base asset for which the quote is requested."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u64] - The quote for the collateral asset in exchange for the base asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the conversion from `u256` to `u64` fails due to overflow."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `2`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Additional Information"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This action is irreversible and should be done with caution, as it removes all ownership privileges."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "resume_collateral_asset",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset to be resumed."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "contract_id",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_pyth_contract_id",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function sets the Pyth contract ID, allowing the contract to interact with the Pyth oracle."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments:"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `contract_id`: [ContractId] - The contract ID of the Pyth oracle to be set."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "supply_base",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function allows users to supply base assets to the market, updating their balance and the market's total supply."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function does not take any parameters directly, as it uses the message context to retrieve the amount and asset ID."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the supply is paused."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the supplied amount is less than or equal to zero."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the supplied asset is not the base asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `2`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `4`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "supply_collateral",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function ensures that the supplied collateral adheres to the market's rules and limits."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the supply is paused."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the supplied amount is less than or equal to zero."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the collateral asset is paused."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the total collateral exceeds the supply cap."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `2`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `4`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "totals_collateral",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function retrieves the total collateral amount for a specific asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u64] - The total collateral ammount."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function allows the current owner to transfer ownership of the contract to a new owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `new_owner`: [Identity] - The identity of the new owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the current owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "configuration",
                    "concreteTypeId": "027212d4a883f4144f8043ef93fee6aa9d766041c7735fa37fae71d45ab6d92d"
                  }
                ],
                "name": "update_collateral_asset",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset to be updated."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `configuration`: [CollateralConfiguration] - The new collateral configuration."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the asset does not exist, indicated by a non-`Some` value in the storage."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "update_data",
                    "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5"
                  }
                ],
                "name": "update_fee",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function interacts with an external oracle to obtain the update fee and ensures that the contract ID is valid."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `update_data`: [Vec<Bytes>] - The data used for the fee update request."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * [u64] - The update fee retrieved from the oracle."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the contract ID is not set (i.e., it is zero)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "configuration",
                    "concreteTypeId": "788c494dd193488709eb7174a5299c17819b0c2e68089b18e0474d616080cc9c"
                  }
                ],
                "name": "update_market_configuration",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function updates the market configuration, allowing the owner to modify settings while preserving certain values."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `configuration`: [MarketConfiguration] - The new market configuration to be set."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `1`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `2`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "price_data_update",
                    "concreteTypeId": "60b16a7d7d88977a17d1cbc5d1d741c4872c833abbe5cd6eaa5e2d741cd8bf19"
                  }
                ],
                "name": "update_price_feeds_if_necessary",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function ensures that the provided price data update is valid and performs an update if the conditions are met."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `price_data_update`: [PriceDataUpdate] - The data necessary for updating the price feeds."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Returns"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function does not return a value."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the contract ID is not set (i.e., it is zero)."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the payment amount is insufficient or the asset ID is not the base asset."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `1`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price_data_update",
                    "concreteTypeId": "60b16a7d7d88977a17d1cbc5d1d741c4872c833abbe5cd6eaa5e2d741cd8bf19"
                  }
                ],
                "name": "withdraw_base",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function allows users to withdraw a specified amount of base assets, potentially borrowing if necessary."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `amount`: [u64] - The amount of base asset to be withdrawn."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `price_data_update`: [PriceDataUpdate] - The price data update struct to be used for updating the price feeds."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the user is not collateralized."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `3`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `5`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_id",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price_data_update",
                    "concreteTypeId": "60b16a7d7d88977a17d1cbc5d1d741c4872c833abbe5cd6eaa5e2d741cd8bf19"
                  }
                ],
                "name": "withdraw_collateral",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function ensures that the withdrawal adheres to the market's rules and checks for collateralization."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `asset_id`: [AssetId] - The asset ID of the collateral asset to be withdrawn."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `amount`: [u64] - The amount of collateral to be withdrawn."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `price_data_update`: [PriceDataUpdate] - The price data update struct to be used for updating the price feeds."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the user is not collateralized."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Writes: `2`"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `4`"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "to",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "withdraw_reserves",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " This function allows the owner to withdraw a specified amount of reserves from the contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Arguments"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `to`: [Identity] - The account to which the reserves will be sent."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * `amount`: [u64] - The amount of reserves to be withdrawn."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Reverts"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the caller is not the owner."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * When the amount requested exceeds the available reserves."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      ""
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " # Number of Storage Accesses"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " * Reads: `4`"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "5557842539076482339",
                "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038"
              },
              {
                "logId": "5650517601072614705",
                "concreteTypeId": "4e6aabd209068d31558291cfd07cff9366801b052a1767bd0a9eb34bf55e8a0e"
              },
              {
                "logId": "3591203286967623281",
                "concreteTypeId": "31d6845ccbeb9e71f30bf07140659072ce92db76041efd6861d6895dace9e658"
              },
              {
                "logId": "5291237237808257645",
                "concreteTypeId": "496e403bcde15a6d2d8a6ac3ae964a1db2145d27464fad7ae2b0dd4390c90c19"
              },
              {
                "logId": "7659206549590130669",
                "concreteTypeId": "6a4af7c6d1aa3fedf33604a44da789ba359bf8f662a56fbc4de9603b8e732291"
              },
              {
                "logId": "10580804319558431108",
                "concreteTypeId": "92d691781932f1848ba9433a9b1c09a97f985b331d88a1a289fc54569161d639"
              },
              {
                "logId": "2161305517876418151",
                "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
              },
              {
                "logId": "16280289466020123285",
                "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
              },
              {
                "logId": "17075205356227152605",
                "concreteTypeId": "ecf750cd9cc44add1b8fc9f1b11bb65d0981711b42c84d20aec21ef32bab7682"
              },
              {
                "logId": "7048493221525582492",
                "concreteTypeId": "61d1473d8ec7f29c9b7f67ec6b840b973400d6af66df556a4fb5ea9884f780b7"
              },
              {
                "logId": "4571204900286667806",
                "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
              },
              {
                "logId": "16873461032230770227",
                "concreteTypeId": "ea2a9368cd82d633fcc3411dbff6c25a78c7ccf550034427221102b74d7926db"
              },
              {
                "logId": "12201150593867749328",
                "concreteTypeId": "a95331d2168897d0f550d1c4f7fc582926a79b3e825866ecf8c11ef8dfb692c6"
              },
              {
                "logId": "5007089152005991246",
                "concreteTypeId": "457cc10e18076b4e7a0ccc563fd089b256767bb56a148450f7e58f0d7cbf54ef"
              },
              {
                "logId": "4883303303013154842",
                "concreteTypeId": "43c4fa7b3297401afbf300127e59ea913e5c8f0c7ae69abbec789ab0bb872bed"
              },
              {
                "logId": "9366109880057078281",
                "concreteTypeId": "81fb1b4fe81422099de81384a1f433aac8964b267aac0428e6bf423e46b88df9"
              },
              {
                "logId": "15118137377144155992",
                "concreteTypeId": "d1ce69d85e3baf58b6bc7ebe55774b2c0ff63b955321139eece739000f91b995"
              },
              {
                "logId": "1940341185534100254",
                "concreteTypeId": "1aed7a0722d2031e0bce0b49bb46e0f91a2237480a9d928eb696c7d1a6d7250c"
              },
              {
                "logId": "7026281871582427040",
                "concreteTypeId": "61825e22a76ff7a0ca3ce1004c7d128c7844a8dde36cf7ea9077f8a57ef1f88a"
              },
              {
                "logId": "12970362301975156672",
                "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
              },
              {
                "logId": "7739866021742362880",
                "concreteTypeId": "6b698723a311c1005f7846d11d7ce209d68d00c120ee855364c14656ffb5b5a7"
              },
              {
                "logId": "4305272899477449480",
                "concreteTypeId": "3bbf66e44a782b08497502f3c67b5e181f14ef16755805fd800040f902019de1"
              },
              {
                "logId": "8551298967468744576",
                "concreteTypeId": "76ac511aac239f80b30e11716c2a730f0a814ea3acc85a13abb1777519465a4a"
              },
              {
                "logId": "2861643217579627023",
                "concreteTypeId": "27b6995841bd520fff14deec990e8d66c03d8df59a510fa25e505694b0bc6ebe"
              }
            ],
            "messagesTypes": [],
            "configurables": [
              {
                "name": "DEBUG_STEP",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "offset": 164616
              }
            ]
          }
        },
        {
          "id": "0x657ab45a6eb98a4893a99fd104347179151e8b3828fd8f2a108cc09770d1ebae",
          "name": "SwayLend USDC Market Proxy",
          "description": "",
          "source": "https://raw.githubusercontent.com/Swaylend/swaylend-monorepo/refs/heads/develop/contracts/market/src/main.sw",
          "commit": "0c84d3a19d777b197b03c34386031985cec71bd3",
          "repo": "https://github.com/Swaylend/swaylend-monorepo",
          "links": [],
          "audits": []
        }
      ],
      "sepolia": []
    },
    "tags": [
      "DeFi"
    ],
    "description": "Swaylend is the first lending protocol on Fuel.",
    "github": "https://github.com/Swaylend/",
    "twitter": "https://x.com/swaylend",
    "discord": "https://discord.gg/7N796pdHNk",
    "image": "swaylend"
  },
  {
    "isLive": false,
    "name": "Tan Theta",
    "url": "https://tantheta.io/",
    "tags": [
      "Tooling",
      "Prediction Market"
    ],
    "description": "Tan Theta provides sophisticated predicates-based order matching engine for seamless and efficient trading experiences in prediction markets, sports books, spot exchanges, and derivatives exchanges.",
    "github": "https://github.com/Tan-Theta-Protocol/",
    "twitter": "https://x.com/tanthetamarkets",
    "discord": "",
    "image": "tantheta"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "isFeatured": true,
    "name": "Thunder",
    "url": "https://thundernft.market/",
    "contracts": {
      "mainnet": [
        {
          "id": "0x243ef4c2301f44eecbeaf1c39fee9379664b59a2e5b75317e8c7e7f26a25ed4d",
          "name": "Thunder Exchange",
          "description": "",
          "source": "https://raw.githubusercontent.com/ThunderFuel/smart-contracts/refs/heads/main/contracts-v1/thunder_exchange/src/main.sw",
          "commit": "aa2876be3aa292f03856a1b7332824fdd276715f",
          "repo": "https://github.com/ThunderFuel/smart-contracts",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "enum errors::ThunderExchangeErrors",
                "concreteTypeId": "479f19c2e6732584a8d67211f59a9c7d1dafb383b714ba8b2343eb079a6d2c88",
                "metadataTypeId": 1
              },
              {
                "type": "enum libraries::order_types::Side",
                "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197",
                "metadataTypeId": 2
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 5,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "struct events::OrderCanceled",
                "concreteTypeId": "bcea1a1c8196adb658b7ceb1b892a1157b6ae379859a52b9fe73717365963e9f",
                "metadataTypeId": 7
              },
              {
                "type": "struct events::OrderExecuted",
                "concreteTypeId": "ea9db4a91e6c7a4c33e788293f3268423e8afe5fa792a0ab21958b5d50200a69",
                "metadataTypeId": 8
              },
              {
                "type": "struct events::OrderPlaced",
                "concreteTypeId": "c0d70b027d51f4624095c4ef483e1132f760e5029a78be67063e7f33181eac28",
                "metadataTypeId": 9
              },
              {
                "type": "struct events::OrderUpdated",
                "concreteTypeId": "47073b9816d9412279107bc0d6bc422cd745629e93d4e1c67c526d7ad5f5b84d",
                "metadataTypeId": 10
              },
              {
                "type": "struct libraries::order_types::MakerOrder",
                "concreteTypeId": "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb",
                "metadataTypeId": 12
              },
              {
                "type": "struct libraries::order_types::TakerOrder",
                "concreteTypeId": "d3408708920d172bcfc4781923ab1553134bdc5d085dcac5537d09287a8847ed",
                "metadataTypeId": 13
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3",
                "metadataTypeId": 14
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61",
                "metadataTypeId": 15
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e",
                "metadataTypeId": 16
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 19
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum errors::ThunderExchangeErrors",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AmountHigherThanPoolBalance",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AssetIdNotMatched",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AmountNotMatched",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "StrategyMustBeNonZeroContract",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "StrategyNotWhitelisted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "MakerMustBeNonZeroAddress",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "TakerMustBeNonZeroAddress",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CallerMustBeMaker",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ExpirationRangeOutOfBound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NonceMustBeNonZero",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PriceMustBeNonZero",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AmountMustBeNonZero",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AssetNotSupported",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ExecutionInvalid",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PaymentAssetMismatched",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PriceMismatched",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AmountMismatched",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PoolTransferFromFailed",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "PoolMismatchedAssetBalance",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::order_types::Side",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "Buy",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Sell",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 17
                  },
                  {
                    "name": "ContractId",
                    "typeId": 19
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 6
                  }
                ],
                "typeParameters": [
                  6
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 6
              },
              {
                "type": "struct events::OrderCanceled",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "user",
                    "typeId": 17
                  },
                  {
                    "name": "strategy",
                    "typeId": 19
                  },
                  {
                    "name": "side",
                    "typeId": 2
                  },
                  {
                    "name": "nonce",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct events::OrderExecuted",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "order",
                    "typeId": 13
                  }
                ]
              },
              {
                "type": "struct events::OrderPlaced",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "order",
                    "typeId": 12
                  }
                ]
              },
              {
                "type": "struct events::OrderUpdated",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "order",
                    "typeId": 12
                  }
                ]
              },
              {
                "type": "struct libraries::order_types::ExtraParams",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "extra_address_param",
                    "typeId": 17
                  },
                  {
                    "name": "extra_contract_param",
                    "typeId": 19
                  },
                  {
                    "name": "extra_u64_param",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct libraries::order_types::MakerOrder",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "side",
                    "typeId": 2
                  },
                  {
                    "name": "maker",
                    "typeId": 17
                  },
                  {
                    "name": "collection",
                    "typeId": 19
                  },
                  {
                    "name": "token_id",
                    "typeId": 0
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "nonce",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "strategy",
                    "typeId": 19
                  },
                  {
                    "name": "payment_asset",
                    "typeId": 18
                  },
                  {
                    "name": "extra_params",
                    "typeId": 11
                  }
                ]
              },
              {
                "type": "struct libraries::order_types::TakerOrder",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "side",
                    "typeId": 2
                  },
                  {
                    "name": "taker",
                    "typeId": 17
                  },
                  {
                    "name": "maker",
                    "typeId": 17
                  },
                  {
                    "name": "nonce",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "token_id",
                    "typeId": 0
                  },
                  {
                    "name": "collection",
                    "typeId": 19
                  },
                  {
                    "name": "strategy",
                    "typeId": 19
                  },
                  {
                    "name": "extra_params",
                    "typeId": 11
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 4
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 17,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 18,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 19,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "strategy",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "nonce",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "side",
                    "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197"
                  }
                ],
                "name": "cancel_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Cancels MakerOrder"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "order",
                    "concreteTypeId": "d3408708920d172bcfc4781923ab1553134bdc5d085dcac5537d09287a8847ed"
                  }
                ],
                "name": "execute_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Executes order by either"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " filling the sell MakerOrder (e.g. purchasing NFT)"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " or the buy MakerOrder (e.g. accepting an offer)"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_asset_manager",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_execution_manager",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_pool",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Getters ///"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_protocol_fee_recipient",
                "output": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_royalty_manager",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_transfer_selector",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "initialize",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Initializes the contract and sets the owner"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Ownable ///"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "order",
                    "concreteTypeId": "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb"
                  }
                ],
                "name": "place_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Places MakerOrder by calling the strategy contract"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Checks if the order is valid"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_manager",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_asset_manager",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "execution_manager",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_execution_manager",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "pool",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_pool",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Setters ///"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "protocol_fee_recipient",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "set_protocol_fee_recipient",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "royalty_manager",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_royalty_manager",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "transfer_selector",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_transfer_selector",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "order",
                    "concreteTypeId": "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb"
                  }
                ],
                "name": "update_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Updates the existing MakerOrder"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "5160872022870533508",
                "concreteTypeId": "479f19c2e6732584a8d67211f59a9c7d1dafb383b714ba8b2343eb079a6d2c88"
              },
              {
                "logId": "13612721533416287670",
                "concreteTypeId": "bcea1a1c8196adb658b7ceb1b892a1157b6ae379859a52b9fe73717365963e9f"
              },
              {
                "logId": "16905867214671608396",
                "concreteTypeId": "ea9db4a91e6c7a4c33e788293f3268423e8afe5fa792a0ab21958b5d50200a69"
              },
              {
                "logId": "12764806370357731851",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086"
              },
              {
                "logId": "9517900813706399297",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61"
              },
              {
                "logId": "13895587280595317858",
                "concreteTypeId": "c0d70b027d51f4624095c4ef483e1132f760e5029a78be67063e7f33181eac28"
              },
              {
                "logId": "7912903559520169914",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3"
              },
              {
                "logId": "10699517786846983752",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e"
              },
              {
                "logId": "5118125025934262562",
                "concreteTypeId": "47073b9816d9412279107bc0d6bc422cd745629e93d4e1c67c526d7ad5f5b84d"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0x1b3de4f663c79fce77ff5a0ae4d92693c3a2001f6d7e39c3d16eb1a80df38fe6",
          "name": "Thunder AssetManager",
          "description": "",
          "source": "https://raw.githubusercontent.com/ThunderFuel/smart-contracts/refs/heads/main/contracts-v1/asset_manager/src/main.sw",
          "commit": "aa2876be3aa292f03856a1b7332824fdd276715f",
          "repo": "https://github.com/ThunderFuel/smart-contracts",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum errors::AssetManagerErrors",
                "concreteTypeId": "763887443d2a6ae25bd40b563190248c23a7e47981142ca06968489e63950963",
                "metadataTypeId": 1
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086",
                "metadataTypeId": 2
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 4,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::asset_id::AssetId>",
                "concreteTypeId": "191bf2140761b3c5ab6c43992d162bb3dc9d7f2272b2ee5f5eeea411ddedcd32",
                "metadataTypeId": 4,
                "typeArguments": [
                  "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3",
                "metadataTypeId": 6
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61",
                "metadataTypeId": 7
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e",
                "metadataTypeId": 8
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 10
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum errors::AssetManagerErrors",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "Initialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AssetAlreadySupported",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AssetNotSupported",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ZeroLengthVec",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "IndexOutOfBound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 9
                  },
                  {
                    "name": "ContractId",
                    "typeId": 11
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 5
                  }
                ],
                "typeParameters": [
                  5
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 5
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "add_asset",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Adds asset into supported assets vec"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_count_supported_assets",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "get_supported_asset",
                "output": "191bf2140761b3c5ab6c43992d162bb3dc9d7f2272b2ee5f5eeea411ddedcd32",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns a supported asset at the index"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "initialize",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Initializes the contract and sets the owner"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "is_asset_supported",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns true or false based on whether the asset is supported or not"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "remove_asset",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Removes asset from supported assets vec"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "12764806370357731851",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086"
              },
              {
                "logId": "8518707422325009122",
                "concreteTypeId": "763887443d2a6ae25bd40b563190248c23a7e47981142ca06968489e63950963"
              },
              {
                "logId": "9517900813706399297",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61"
              },
              {
                "logId": "7912903559520169914",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3"
              },
              {
                "logId": "10699517786846983752",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0x773ca186f811c1655be9d6dcc84aef437cf25c2ebe8c367810529a8ee53fc92a",
          "name": "Thunder Pool",
          "description": "",
          "source": "https://raw.githubusercontent.com/ThunderFuel/smart-contracts/refs/heads/main/contracts-v1/pool/src/main.sw",
          "commit": "aa2876be3aa292f03856a1b7332824fdd276715f",
          "repo": "https://github.com/ThunderFuel/smart-contracts",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum errors::PoolErrors",
                "concreteTypeId": "d84fbe711625fc4963485a182bc445234732de8f75b22bb77cb6d99945f0d39a",
                "metadataTypeId": 1
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086",
                "metadataTypeId": 2
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 4,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "struct events::Deposit",
                "concreteTypeId": "a93fb3d7088884ac8084fc44b117612059604f3d2051bfb1e2612381c3cebda9",
                "metadataTypeId": 6
              },
              {
                "type": "struct events::Transfer",
                "concreteTypeId": "ce820e1eb27c6aa6e2b6ba949183eb4a090927d56fbc51168bb4a45081326a7a",
                "metadataTypeId": 7
              },
              {
                "type": "struct events::Withdrawal",
                "concreteTypeId": "b84bb3c31965b31ba7e5d56509fdca7789962e30c056cae6569a46c6a41778a0",
                "metadataTypeId": 8
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3",
                "metadataTypeId": 9
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61",
                "metadataTypeId": 10
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e",
                "metadataTypeId": 11
              },
              {
                "type": "struct std::asset_id::AssetId",
                "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                "metadataTypeId": 13
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 14
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum errors::PoolErrors",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AssetNotSupported",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "AmountHigherThanBalance",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CallerMustBeTheExchange",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "IdentityMustBeNonZero",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "FromToSameAddress",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 12
                  },
                  {
                    "name": "ContractId",
                    "typeId": 14
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 5
                  }
                ],
                "typeParameters": [
                  5
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 5
              },
              {
                "type": "struct events::Deposit",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "address",
                    "typeId": 3
                  },
                  {
                    "name": "asset",
                    "typeId": 13
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct events::Transfer",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "from",
                    "typeId": 3
                  },
                  {
                    "name": "to",
                    "typeId": 3
                  },
                  {
                    "name": "asset",
                    "typeId": 13
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct events::Withdrawal",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "address",
                    "typeId": 3
                  },
                  {
                    "name": "asset",
                    "typeId": 13
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "account",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "balance_of",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns the balance of the user by the assetId"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "deposit",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Deposits the supported asset into this contract"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " and assign the deposited amount to the depositer as bid balance"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  },
                  {
                    "name": "payable",
                    "arguments": []
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_asset_manager",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Getters"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_exchange",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "exchange",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "asset_manager",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "initialize",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Ownable"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset_manager",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_asset_manager",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "exchange_contract",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_exchange",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Setters"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  }
                ],
                "name": "total_supply",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns the total supply of the asset in this contract"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "from",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "to",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "transfer_from",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Transfers the amount of bid balance from Identity to another Identity."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by Thunder Exchange contract."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " It is used in accepting offers where the bid balance"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " is removed from the offerer by the amount of the offer and sent to the exchange contract"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " to unwrap the bid balance and send the amount to the user who accepted the offer after deducting the fees."
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "asset",
                    "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
                  },
                  {
                    "name": "amount",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "withdraw",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Withdraws the amount of assetId from the contract"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " and sends to sender if sender has enough balance"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "15586886228264746057",
                "concreteTypeId": "d84fbe711625fc4963485a182bc445234732de8f75b22bb77cb6d99945f0d39a"
              },
              {
                "logId": "12195664052085097644",
                "concreteTypeId": "a93fb3d7088884ac8084fc44b117612059604f3d2051bfb1e2612381c3cebda9"
              },
              {
                "logId": "12764806370357731851",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086"
              },
              {
                "logId": "9517900813706399297",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61"
              },
              {
                "logId": "7912903559520169914",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3"
              },
              {
                "logId": "14880471643791846054",
                "concreteTypeId": "ce820e1eb27c6aa6e2b6ba949183eb4a090927d56fbc51168bb4a45081326a7a"
              },
              {
                "logId": "10699517786846983752",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e"
              },
              {
                "logId": "13279905576758129435",
                "concreteTypeId": "b84bb3c31965b31ba7e5d56509fdca7789962e30c056cae6569a46c6a41778a0"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0xfb2b92c17160f9856664bde85bec51f5839d565898d489a6ef8fcb9b73575b57",
          "name": "Thunder StrategyFixedPrice",
          "description": "",
          "source": "https://raw.githubusercontent.com/ThunderFuel/smart-contracts/refs/heads/main/contracts-v1/execution_strategies/strategy_fixed_price_sale/src/main.sw",
          "commit": "aa2876be3aa292f03856a1b7332824fdd276715f",
          "repo": "https://github.com/ThunderFuel/smart-contracts",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum errors::StrategyFixedPriceErrors",
                "concreteTypeId": "698db560e1f84979ecda6435b1be18a8c7843aaf688218701b73431d8e610e2a",
                "metadataTypeId": 1
              },
              {
                "type": "enum libraries::order_types::Side",
                "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197",
                "metadataTypeId": 2
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 4
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 5,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "enum std::option::Option<struct libraries::order_types::MakerOrder>",
                "concreteTypeId": "c1247fb45d12f60f490392a0ee7342da7621d729580ef4db4378f7fa40dce5de",
                "metadataTypeId": 5,
                "typeArguments": [
                  "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb"
                ]
              },
              {
                "type": "struct libraries::execution_result::ExecutionResult",
                "concreteTypeId": "7777d8570157d7515a05d05a1ce6c2a32889f3f5bf5924f855909d5b47504c4e",
                "metadataTypeId": 7
              },
              {
                "type": "struct libraries::order_types::MakerOrder",
                "concreteTypeId": "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb",
                "metadataTypeId": 9
              },
              {
                "type": "struct libraries::order_types::TakerOrder",
                "concreteTypeId": "d3408708920d172bcfc4781923ab1553134bdc5d085dcac5537d09287a8847ed",
                "metadataTypeId": 10
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3",
                "metadataTypeId": 11
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61",
                "metadataTypeId": 12
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e",
                "metadataTypeId": 13
              },
              {
                "type": "struct std::address::Address",
                "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308",
                "metadataTypeId": 14
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 16
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum errors::StrategyFixedPriceErrors",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ExchangeAlreadyInitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "FeeTooHigh",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CallerMustBeTheExchange",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "OrderMismatchedToUpdate",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::order_types::Side",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "Buy",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Sell",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 14
                  },
                  {
                    "name": "ContractId",
                    "typeId": 16
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 5,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 6
                  }
                ],
                "typeParameters": [
                  6
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 6
              },
              {
                "type": "struct libraries::execution_result::ExecutionResult",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "is_executable",
                    "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
                  },
                  {
                    "name": "collection",
                    "typeId": 16
                  },
                  {
                    "name": "token_id",
                    "typeId": 0
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "payment_asset",
                    "typeId": 15
                  }
                ]
              },
              {
                "type": "struct libraries::order_types::ExtraParams",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "extra_address_param",
                    "typeId": 14
                  },
                  {
                    "name": "extra_contract_param",
                    "typeId": 16
                  },
                  {
                    "name": "extra_u64_param",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct libraries::order_types::MakerOrder",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "side",
                    "typeId": 2
                  },
                  {
                    "name": "maker",
                    "typeId": 14
                  },
                  {
                    "name": "collection",
                    "typeId": 16
                  },
                  {
                    "name": "token_id",
                    "typeId": 0
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "amount",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "nonce",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "strategy",
                    "typeId": 16
                  },
                  {
                    "name": "payment_asset",
                    "typeId": 15
                  },
                  {
                    "name": "extra_params",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct libraries::order_types::TakerOrder",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "side",
                    "typeId": 2
                  },
                  {
                    "name": "taker",
                    "typeId": 14
                  },
                  {
                    "name": "maker",
                    "typeId": 14
                  },
                  {
                    "name": "nonce",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "price",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "token_id",
                    "typeId": 0
                  },
                  {
                    "name": "collection",
                    "typeId": 16
                  },
                  {
                    "name": "strategy",
                    "typeId": 16
                  },
                  {
                    "name": "extra_params",
                    "typeId": 8
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "metadataTypeId": 13,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 4
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 4
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 14,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::asset_id::AssetId",
                "metadataTypeId": 15,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 16,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "maker",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  },
                  {
                    "name": "nonce",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "side",
                    "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197"
                  }
                ],
                "name": "cancel_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Cancels MakerOrder of the user"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by Thunder Exchange contract"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "order",
                    "concreteTypeId": "d3408708920d172bcfc4781923ab1553134bdc5d085dcac5537d09287a8847ed"
                  }
                ],
                "name": "execute_order",
                "output": "7777d8570157d7515a05d05a1ce6c2a32889f3f5bf5924f855909d5b47504c4e",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Checks if the MakerOrder is exectuable."
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " If exectuable, then updates the storage"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by Thunder Exchange contract"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_exchange",
                "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "user",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  },
                  {
                    "name": "nonce",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "side",
                    "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197"
                  }
                ],
                "name": "get_maker_order_of_user",
                "output": "c1247fb45d12f60f490392a0ee7342da7621d729580ef4db4378f7fa40dce5de",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "user",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  },
                  {
                    "name": "side",
                    "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197"
                  }
                ],
                "name": "get_min_order_nonce_of_user",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "user",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  },
                  {
                    "name": "side",
                    "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197"
                  }
                ],
                "name": "get_order_nonce_of_user",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_protocol_fee",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " GETTERS"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "exchange",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "fee",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "initialize",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Initializes the contract, sets the owner, and Thunder Exchange contract"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "maker",
                    "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
                  },
                  {
                    "name": "nonce",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  },
                  {
                    "name": "side",
                    "concreteTypeId": "b003c2b57c46049375f998db2f982f6f1598f54310c64f499aab5c7a8ea9a197"
                  }
                ],
                "name": "is_valid_order",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Ownable ///"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "order",
                    "concreteTypeId": "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb"
                  }
                ],
                "name": "place_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Stores MakerOrder of the user"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by Thunder Exchange contract"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "exchange_contract",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "set_exchange",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Sets Thunder Exchange contract"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by the owner"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "fee",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "set_protocol_fee",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Sets the protocol fee of the platform"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by the owner"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "order",
                    "concreteTypeId": "3d46176b340e1859842235481ab83a21dd6493b73dcbfc8e8c0ba96dbd2d07bb"
                  }
                ],
                "name": "update_order",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Updates the existing MakerOrder of the user"
                    ]
                  },
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Only callable by Thunder Exchange contract"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "7605934773411268985",
                "concreteTypeId": "698db560e1f84979ecda6435b1be18a8c7843aaf688218701b73431d8e610e2a"
              },
              {
                "logId": "12764806370357731851",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086"
              },
              {
                "logId": "9517900813706399297",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61"
              },
              {
                "logId": "7912903559520169914",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3"
              },
              {
                "logId": "10699517786846983752",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0xd5af7d47d518a679495f5ebd6de51bc8ddffbe173f3c1775d90f7acb7e6655ad",
          "name": "Thunder ExecutionManager",
          "description": "",
          "source": "https://raw.githubusercontent.com/ThunderFuel/smart-contracts/refs/heads/main/contracts-v1/execution_manager/src/main.sw",
          "commit": "aa2876be3aa292f03856a1b7332824fdd276715f",
          "repo": "https://github.com/ThunderFuel/smart-contracts",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "bool",
                "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
              },
              {
                "type": "enum errors::ExecutionManagerErrors",
                "concreteTypeId": "98612a90ab93443974b75502a8ed3e3a5cd8864a35761e7d95b5c558d3b7d100",
                "metadataTypeId": 1
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086",
                "metadataTypeId": 2
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 4,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "enum std::option::Option<struct std::contract_id::ContractId>",
                "concreteTypeId": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
                "metadataTypeId": 4,
                "typeArguments": [
                  "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3",
                "metadataTypeId": 6
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61",
                "metadataTypeId": 7
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e",
                "metadataTypeId": 8
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 10
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum errors::ExecutionManagerErrors",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "StrategyAlreadyWhitelisted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "StrategyNotWhitelisted",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ZeroLengthVec",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "IndexOutOfBound",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 9
                  },
                  {
                    "name": "ContractId",
                    "typeId": 10
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 5
                  }
                ],
                "typeParameters": [
                  5
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 5
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [
                  {
                    "name": "strategy",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "add_strategy",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Adds strategy into whitelistes strategies"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "get_count_whitelisted_strategies",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "get_whitelisted_strategy",
                "output": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns a whitelisted strategy at the index"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "initialize",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Initializes the contract and sets the owner"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "strategy",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "is_strategy_whitelisted",
                "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns true or false based on whether the strategy is whitelisted or not"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "index",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "remove_strategy",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Removes strategy from whitelistes strategies"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "12764806370357731851",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086"
              },
              {
                "logId": "10980104167348192313",
                "concreteTypeId": "98612a90ab93443974b75502a8ed3e3a5cd8864a35761e7d95b5c558d3b7d100"
              },
              {
                "logId": "9517900813706399297",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61"
              },
              {
                "logId": "7912903559520169914",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3"
              },
              {
                "logId": "10699517786846983752",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        },
        {
          "id": "0x2340a412a77607108d160926222632dd427bafc6f57e185c0140c849d88b8e99",
          "name": "Thunder RoyaltyManager",
          "description": "",
          "source": "https://raw.githubusercontent.com/ThunderFuel/smart-contracts/refs/heads/main/contracts-v1/royalty_manager/src/main.sw",
          "commit": "aa2876be3aa292f03856a1b7332824fdd276715f",
          "repo": "https://github.com/ThunderFuel/smart-contracts",
          "links": [],
          "audits": [],
          "abi": {
            "programType": "contract",
            "specVersion": "1",
            "encodingVersion": "1",
            "concreteTypes": [
              {
                "type": "()",
                "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
              },
              {
                "type": "enum errors::RoyaltyManagerErrors",
                "concreteTypeId": "96d66c401589582a4e0611b3bff6ad49259030ac8d6d141c9c36745c1ce41d1e",
                "metadataTypeId": 1
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086",
                "metadataTypeId": 2
              },
              {
                "type": "enum std::identity::Identity",
                "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                "metadataTypeId": 3
              },
              {
                "type": "enum std::option::Option<enum std::identity::Identity>",
                "concreteTypeId": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "metadataTypeId": 4,
                "typeArguments": [
                  "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                ]
              },
              {
                "type": "enum std::option::Option<struct interfaces::royalty_manager_interface::RoyaltyInfo>",
                "concreteTypeId": "78f296480b1a39b91fffe89acbe042651ba3d74016fecadd0285b024ef8e896e",
                "metadataTypeId": 4,
                "typeArguments": [
                  "89c876953f15cbfcc40dfacf6edf364bf67f7b06b48757014de53ddbe62a10aa"
                ]
              },
              {
                "type": "struct interfaces::royalty_manager_interface::RoyaltyInfo",
                "concreteTypeId": "89c876953f15cbfcc40dfacf6edf364bf67f7b06b48757014de53ddbe62a10aa",
                "metadataTypeId": 6
              },
              {
                "type": "struct interfaces::royalty_manager_interface::RoyaltyRegistryEvent",
                "concreteTypeId": "68ed4e12654c0313180bf436b02e414f85b52de7c5f09a2cbc5ffe383adb7c1f",
                "metadataTypeId": 7
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3",
                "metadataTypeId": 8
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61",
                "metadataTypeId": 9
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e",
                "metadataTypeId": 10
              },
              {
                "type": "struct std::contract_id::ContractId",
                "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
                "metadataTypeId": 12
              },
              {
                "type": "u64",
                "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              }
            ],
            "metadataTypes": [
              {
                "type": "b256",
                "metadataTypeId": 0
              },
              {
                "type": "enum errors::RoyaltyManagerErrors",
                "metadataTypeId": 1,
                "components": [
                  {
                    "name": "OnlyOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Initialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "CallerMustBeOwnerOrAdmin",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "FeeHigherThanLimit",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "FeeLimitTooHigh",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "ZeroAddress",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum libraries::ownable::AccessError",
                "metadataTypeId": 2,
                "components": [
                  {
                    "name": "CannotReinitialized",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "NotOwner",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  }
                ]
              },
              {
                "type": "enum std::identity::Identity",
                "metadataTypeId": 3,
                "components": [
                  {
                    "name": "Address",
                    "typeId": 11
                  },
                  {
                    "name": "ContractId",
                    "typeId": 12
                  }
                ]
              },
              {
                "type": "enum std::option::Option",
                "metadataTypeId": 4,
                "components": [
                  {
                    "name": "None",
                    "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
                  },
                  {
                    "name": "Some",
                    "typeId": 5
                  }
                ],
                "typeParameters": [
                  5
                ]
              },
              {
                "type": "generic T",
                "metadataTypeId": 5
              },
              {
                "type": "struct interfaces::royalty_manager_interface::RoyaltyInfo",
                "metadataTypeId": 6,
                "components": [
                  {
                    "name": "collection",
                    "typeId": 12
                  },
                  {
                    "name": "receiver",
                    "typeId": 3
                  },
                  {
                    "name": "fee",
                    "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ]
              },
              {
                "type": "struct interfaces::royalty_manager_interface::RoyaltyRegistryEvent",
                "metadataTypeId": 7,
                "components": [
                  {
                    "name": "royalty_info",
                    "typeId": 6
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipRenounced",
                "metadataTypeId": 8,
                "components": [
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipSet",
                "metadataTypeId": 9,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct libraries::ownable::OwnershipTransferred",
                "metadataTypeId": 10,
                "components": [
                  {
                    "name": "new_owner",
                    "typeId": 3
                  },
                  {
                    "name": "previous_owner",
                    "typeId": 3
                  }
                ]
              },
              {
                "type": "struct std::address::Address",
                "metadataTypeId": 11,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              },
              {
                "type": "struct std::contract_id::ContractId",
                "metadataTypeId": 12,
                "components": [
                  {
                    "name": "bits",
                    "typeId": 0
                  }
                ]
              }
            ],
            "functions": [
              {
                "inputs": [],
                "name": "get_royalty_fee_limit",
                "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "collection",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  }
                ],
                "name": "get_royalty_info",
                "output": "78f296480b1a39b91fffe89acbe042651ba3d74016fecadd0285b024ef8e896e",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Returns the royalty info of the NFT collection"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "initialize",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Initializes the contract and sets the owner"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "owner",
                "output": "253aea1197e8005518365bd24c8bc31f73a434fac0f7350e57696edfdd4850c2",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "collection",
                    "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
                  },
                  {
                    "name": "receiver",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  },
                  {
                    "name": "fee",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "register_royalty_info",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Stores royalty info by admin or owner of the NFT collection contract"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "name": "renounce_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_fee_limit",
                    "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                  }
                ],
                "name": "set_royalty_fee_limit",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "doc-comment",
                    "arguments": [
                      " Sets the max limit of the royalty that can be set for collections"
                    ]
                  },
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "name": "new_owner",
                    "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
                  }
                ],
                "name": "transfer_ownership",
                "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                "attributes": [
                  {
                    "name": "storage",
                    "arguments": [
                      "read",
                      "write"
                    ]
                  }
                ]
              }
            ],
            "loggedTypes": [
              {
                "logId": "10868993773200300074",
                "concreteTypeId": "96d66c401589582a4e0611b3bff6ad49259030ac8d6d141c9c36745c1ce41d1e"
              },
              {
                "logId": "12764806370357731851",
                "concreteTypeId": "b125b3c353d0e20ba2296785cc1653908f3c1fb7e67e055938c31fd0e1bb8086"
              },
              {
                "logId": "9517900813706399297",
                "concreteTypeId": "8416605cb05f0e41791636365d6644426eb8723c9bbdfc940b41652fc5bb7e61"
              },
              {
                "logId": "7560785190340789011",
                "concreteTypeId": "68ed4e12654c0313180bf436b02e414f85b52de7c5f09a2cbc5ffe383adb7c1f"
              },
              {
                "logId": "7912903559520169914",
                "concreteTypeId": "6dd047dcef1fafba87b54170a1ee4a99a8ae37746e594cbc548c5315368b20c3"
              },
              {
                "logId": "10699517786846983752",
                "concreteTypeId": "947c52bd18fcf648398d82d4d7b3cb539ef96fec3211f41a6e733a8a4f02f67e"
              }
            ],
            "messagesTypes": [],
            "configurables": []
          }
        }
      ],
      "sepolia": []
    },
    "tags": [
      "NFT"
    ],
    "description": "Thunder is the superior NFT marketplace on Fuel.",
    "github": "",
    "twitter": "https://x.com/ThunderbyFuel",
    "discord": "https://discord.gg/thundernftmarket",
    "image": "thunder"
  },
  {
    "isLive": false,
    "name": "Transak",
    "url": "https://transak.com/",
    "tags": [
      "On-Ramp"
    ],
    "description": "On-Ramp with most payment methods",
    "github": "",
    "twitter": "https://x.com/Transak",
    "image": "transak"
  },
  {
    "isLive": false,
    "name": "Zap Protocol",
    "url": "https://zapinfra.com/",
    "tags": [
      "Tooling"
    ],
    "description": "Zap is the gateway to better UX, cheaper transactions, and faster execution on Fuel",
    "github": "https://github.com/Layer3Labs/Zap-Protocol",
    "twitter": "https://x.com/ZapPayment",
    "image": "zap"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Immunefi",
    "url": "https://immunefi.com/",
    "tags": ["Security"],
    "description": "Immunefi is the leading onchain crowdsourced security platform. Guarding $190B+ in user funds across projects like Wormhole, Polygon and Optimism, Immunefi has paid out $100M+ to security researchers.",
    "github": "https://github.com/immunefi-team/",
    "twitter": "https://x.com/immunefi",
    "image": "immunefi"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Blocksec",
    "url": "https://blocksec.com/",
    "tags": ["Security"],
    "description": "It provides expert security auditing services and post-launch security product Phalcon, which can monitor and block hacks.",
    "github": "https://github.com/blocksecteam",
    "twitter": "https://x.com/blocksecteam",
    "image": "blocksec"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Hexens",
    "url": "https://hexens.io/",
    "tags": ["Security"],
    "description": "Hexens is a premier cybersecurity provider with an essential focus on blockchain. Staying on the edge of the knife of emerging tech, it secures more than $85 BLN assets net worth across Web2 and Web3.",
    "github": "https://github.com/Hexens",
    "twitter": "https://x.com/hexensio",
    "image": "hexens"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Quill Audits",
    "url": "https://www.quillaudits.com/",
    "tags": ["Security"],
    "description": "Web3 security leader offering robust audit and pentest services, having secured 1000+ projects since 2018.",
    "github": "https://github.com/quillhash/QuillAudit_Reports",
    "twitter": "https://x.com/quillaudits_ai",
    "image": "quillaudits"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "CD Security",
    "url": "https://cdsecurity.site/",
    "tags": ["Security"],
    "description": "Providing Elite Smart Contract Security. Expert security reviews for your smart contracts and blockchain projects.",
    "github": "https://github.com/CDSecurity/audits",
    "twitter": "https://x.com/CDSecurity_",
    "image": "cdsecurity"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Sherlock",
    "url": "https://www.sherlock.xyz/",
    "tags": ["Security"],
    "description": "Mobilize Sherlock’s distributed network of auditors to protect your users from the most dangerous vulnerabilities",
    "github": "https://github.com/sherlock-protocol/sherlock-reports",
    "twitter": "https://x.com/sherlockdefi",
    "image": "sherlock"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Zellic",
    "url": "https://www.zellic.io/",
    "tags": ["Security"],
    "description": "Zellic is a security research firm with deep expertise in blockchain security and cryptography, led by the best hackers in the world.",
    "github": "https://github.com/zellic/",
    "twitter": "https://twitter.com/zellic_io",
    "image": "zellic"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Linum Labs",
    "url": "https://www.linumlabs.com/",
    "tags": ["Security"],
    "description": "Linum Labs specializes in custom blockchain solutions and is one of the leading agencies offering Sway smart contract auditing services on Fuel Network.",
    "github": "",
    "twitter": "https://x.com/linumlabs",
    "image": "linumlabs"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Trail of Bits",
    "url": "https://www.trailofbits.com/",
    "tags": ["Security"],
    "description": "Trail of Bits doesn't just find bugs - we deliver comprehensive security solutions in AI/ML, application security, blockchain, and cryptography through design reviews, threat models, and code reviews.",
    "github": "https://github.com/trailofbits",
    "twitter": "https://x.com/trailofbits",
    "image": "trailofbits"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Safe Edges",
    "url": "https://safeedges.in/",
    "tags": ["Security"],
    "description": "Safe Edges is fully focused Sway security audits for projects built on the Fuel Network",
    "github": "https://github.com/Safe-Edges",
    "twitter": "https://x.com/safe_edges",
    "image": "safeedges"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Simply Staking",
    "url": "https://stake.simplystaking.com/fuel/",
    "tags": ["Bridge"],
    "description": "Stake your Fuel tokens effortlessly with Simply Staking's secure, intuitive dashboard. Track rewards, access updates, and maximize your staking potential.",
    "github": "https://github.com/SimplyStaking",
    "twitter": "https://x.com/SimplyStaking",
    "image": "simplystaking"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Ourovoros",
    "url": "https://ourovoros.io/",
    "tags": ["Security"],
    "description": "Ourovoros is a collective of ex-auditors with over 500 audits under our belt. We are focused on delivering high quality development and auditing for blockchain solutions.",
    "github": "https://github.com/ourovoros-io",
    "twitter": "https://x.com/ioourovoros/",
    "image": "ourovoros"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Hacken",
    "url": "https://hacken.io/",
    "tags": ["Security"],
    "description": "Our services include Smart Contract Audit, Blockchain Protocol Audit, dApp Audit, Penetration Testing, and CCSS Audit. Our product portfolio features HackenProof bug bounties, CER.live cybersecurity ranking, and Extractor on-chain monitoring.",
    "github": "https://github.com/hknio",
    "twitter": "https://x.com/hackenclub",
    "image": "hacken"
  },
  {
    "isLiveMainnet": true,
    "isLive": true,
    "name": "Hexagate",
    "url": "https://www.hexagate.com/",
    "tags": ["Security"],
    "description": "Hexagate offers real-time threat detection and proactive prevention platform, leveraging ML and advanced algorithms for early exploit detection.",
    "github": "",
    "twitter": "https://x.com/hexagate_",
    "image": "hexagate"
  },
  {
    "isLiveMainnet": false,
    "isLive": false,
    "name": "Cybernetics",
    "url": "https://www.cybernetics.gg/",
    "tags": ["NFT"],
    "description": "The First Utility-Driven NFT Collection on Fuel Featuring 1912 Unique Artworks.",
    "github": "https://github.com/DevForce99",
    "twitter": "https://x.com/fuelcybernetics",
    "image": "cybernetics"
  }
]
